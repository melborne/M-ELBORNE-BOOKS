<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title>オブジェクトの理解から始めるRuby</title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>４章　継承（Inheritance）</h2>

<p>「継承」とはクラス間の相互依存関係のことです。Rubyではあるクラスが定義したメソッドを、あたかも自分に定義されたもののように他のクラスが利用できます。利用される側をスーパークラス、利用する側をサブクラスと呼びます。</p>

<p>他のクラスを利用してクラスを定義する場合、自分の名前にスーパークラス名を接ぎ木します。CreatureクラスをスーパークラスとするPersonクラスを定義します。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Creature</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">name</span>
    <span class="vi">@name</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="no">Creature</span>  <span class="c1"># CreatureクラスのサブクラスPersonを定義</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">age</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">age</span>
   <span class="vi">@age</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">me</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Charlie&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="n">me</span><span class="o">.</span><span class="n">name</span>   <span class="c1"># =&gt; &quot;Charlie&quot;</span>
<span class="n">me</span><span class="o">.</span><span class="n">age</span>    <span class="c1"># =&gt; 8</span>
</code></pre></div>


<p>こうすればサブクラスPersonのインスタンスであるmeオブジェクトでも、自ら定義することなくメソッドnameが使えるようになります。つまり、me.nameが実行されたとき、このメッセージは最初Personクラスに送られて、そこで対応するnameメソッドが存在しないことが分かると、次いでそのスーパークラスに渡され実行されます（モジュールの話はここでは割愛します）。</p>

<p>一般的に言えば、Rubyはメッセージに対応するメソッドが見つかるまでクラスツリーを遡り、最後にはObjectクラス（正確にはBasicObjectクラス）に至ります。</p>

<p>一つのクラスは同時並行的に複数のクラスと継承関係になれません。つまり複数のスーパークラスを同時に持てないのです。このような制限を、制限のない「多重継承」に対して「単純継承」といいます。</p>

<p>しかし他のクラスのサブクラスをスーパークラスにすることはできます。この数つまり経時直線的な段数に制限はありません。CreatureクラスのサブクラスであるPersonクラスをスーパークラスとして、PersonInEarthを定義してみましょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">PersonInEarth</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">country</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@country</span> <span class="o">=</span> <span class="n">country</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">country</span>
    <span class="vi">@country</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">a_friend</span> <span class="o">=</span> <span class="no">PersonInEarth</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Fernando&#39;</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="s2">&quot;Spain&quot;</span><span class="p">)</span>
<span class="n">a_friend</span><span class="o">.</span><span class="n">name</span>    <span class="c1"># &gt;&gt; &quot;Fernando&quot;</span>
<span class="n">a_friend</span><span class="o">.</span><span class="n">country</span> <span class="c1"># &gt;&gt; &quot;Spain&quot;</span>
</code></pre></div>


<p>この継承関係を図に示します。</p>

<p><img src="images/ruby_inherit.png" alt="ruby inheritance noshadow" /></p>

<br clear='all' />


<p>誰がスーパークラスかはsuperclassメソッドで調べることができます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">PersonInEarh</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># &gt;&gt; Person</span>
</code></pre></div>


<p>Rubyでは継承関係にない独立したクラスというのは作れません。クラス定義においてスーパークラスを指定しないとき、Rubyは勝手にObjectクラスをそのスーパークラスにセットします。つまりすべてのクラスはObjectクラスのサブクラスなのです。組み込みクラスも例外ではありません。</p>

<p>何も定義しないクラスでmethodsメソッドを呼べば、それが既にObjectクラスのサブクラスになっていることが確認できます（このメソッドを呼べること自体が証拠です）。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Nothing</span>

<span class="k">end</span>
<span class="n">n</span> <span class="o">=</span> <span class="no">Nothing</span><span class="o">.</span><span class="n">new</span>
<span class="no">Nothing</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Object</span>
<span class="n">n</span><span class="o">.</span><span class="n">methods</span> <span class="c1"># =&gt; [:nil?, :===, :=~, :!~, :eql?, :hash, :&lt;=&gt;, :class, :singleton_class, :clone, :dup, :initialize_dup, :initialize_clone, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze, :frozen?, :to_s, :inspect, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to?, :respond_to_missing?, :extend, :display, :method, :public_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]</span>
</code></pre></div>


<p>NothingクラスはObjectクラスが持っているすべてのメソッドを継承しています。</p>

<p>継承はクラス間の師弟制度のようなものです。とりわけ、Rubyの継承は一子相伝、一人がそのすべてを引き継ぐという特徴を有します。この特徴のため、継承関係が成熟しクラス階層が限りなきものになったとしても、Rubyは迷うことなくその末端から頂点、つまりObjectクラスまでを遡ることができるのです。</p>

<p>基本的にサブクラスはスーパークラスの特性をすべて引き継ぎますが、サブクラスにおいてその一部を拒否したり再定義することは許されます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">PersonInEarth</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">undef</span> <span class="ss">:age</span>  <span class="c1"># ageメソッドを未定義にする</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">age</span><span class="p">,</span><span class="n">country</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">age</span><span class="p">)</span>
    <span class="vi">@country</span> <span class="o">=</span> <span class="n">country</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">country</span>
    <span class="vi">@country</span>
  <span class="k">end</span>

  <span class="k">alias</span> <span class="ss">:name_old</span> <span class="ss">:name</span>  <span class="c1">#nameメソッドをname_oldに変える</span>
  <span class="k">def</span> <span class="nf">name</span>   <span class="c1"># nameメソッドを再定義する</span>
    <span class="s2">&quot;my name is </span><span class="si">#{</span><span class="n">name_old</span><span class="si">}</span><span class="s2">.&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">a_friend</span> <span class="o">=</span> <span class="no">PersonInEarth</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Fernand&#39;</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="s2">&quot;Spain&quot;</span><span class="p">)</span>
<span class="nb">p</span> <span class="n">a_friend</span><span class="o">.</span><span class="n">name</span> <span class="c1"># &gt;&gt; &quot;my name is Fernand.&quot;</span>
<span class="nb">p</span> <span class="n">a_friend</span><span class="o">.</span><span class="n">age</span>
  <span class="c1"># ~&gt; -:39: undefined method `age` for #&lt;PersonInEarth:0x23550&gt; (NoMethodError)</span>
</code></pre></div>



  </body>
</html>
