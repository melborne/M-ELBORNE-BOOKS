<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>付録２　RubyのModuleクラスはすべてのモジュールの母であり同時にすべてのクラスの父である！</h2>

<p>Moduleクラスはすべてのモジュールの生成クラスです。よってModuleクラスに定義されたインスタンスメソッドmは、すべてのモジュールで定義されたモジュールメソッドself.mになります。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Module</span>
  <span class="k">def</span> <span class="nf">m</span>
    <span class="s1">&#39;m&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Module</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
<span class="no">Kernel</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
<span class="no">Enumerable</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
<span class="no">Math</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
</code></pre></div>


<p>またModuleクラスはClassクラスのスーパークラスでもあります。よってModuleクラスに定義されたインスタンスメソッドmは、Classクラスで定義されたインスタンスメソッドmになります。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
</code></pre></div>


<p>ここで、Classクラスはすべてのクラスの生成クラスです。よってClassクラスのインスタンスメソッドとなったmは、すべてのクラスのクラスメソッドself.mになります。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Object</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
<span class="nb">Array</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
<span class="k">class</span> <span class="nc">MyClass</span>
<span class="k">end</span>
<span class="no">MyClass</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
</code></pre></div>


<p>この中には当然Moduleクラスも含まれているので、Classクラスのインスタンスメソッドmは、Moduleクラスのクラスメソッドself.mにもなります。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Module</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
</code></pre></div>


<p>ところが、ModuleクラスはClassクラスのスーパークラスなので、Moduleクラスのクラスメソッドになったself.mは、Classクラスのクラスメソッドself.mにもなります。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Class</span><span class="o">.</span><span class="n">m</span> <span class="c1"># =&gt; &quot;m&quot;</span>
</code></pre></div>


<p>整理しましょう。</p>

<p>Moduleクラスが１つのインスタンスメソッドmを持つと、それがすべてのモジュールのモジュールメソッドself.mとなり、Classクラスのインスタンスメソッドmとなり、ModuleクラスおよびClassクラスを含む、すべてのクラスのクラスメソッドself.mとなります。</p>

<p>Moduleクラスはモジュールの生成クラスです。よって、Classクラスがすべてのクラスを生み出すように、Moduleクラスはすべてのモジュールを生み出します。そして生み出されたすべてのモジュールは、Moduleクラスの特性に依存します。</p>

<p>そう、Classクラスがすべてのクラスの母であるなら...</p>

<p>「Moduleクラスはすべてのモジュールの母」なのです！</p>

<p>加えて、ModuleクラスはClassクラスのスーパークラスでもあります。そのためModuleクラスに定義されたすべてのメソッドはClassクラスで使えます。すべてのクラスはその生成クラスであるClassクラスの影響を受けるので、結果すべてのクラスはModuleクラスの影響を受けることになります。つまり、ModuleクラスはClassクラスによるクラス生成において、それを支援する極めて重要な役割を担っているのです。</p>

<p>要するにModuleクラスは、すべてのクラスの母であるClassクラスを支える...</p>

<p>「すべてのクラスの父」なのです！</p>

<p>そうModuleクラスは、一方で各モジュールの母として彼らを生み出し、他方で各クラスの父としてClassクラスを支えるという、父と母の２つの顔を持った実体だったのです！</p>
  </body>
</html>
