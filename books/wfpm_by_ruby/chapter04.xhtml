<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>３章　関数の貼り合せ ─ツリーにおける張り合せ ─</h2>

<p>貼り合せの能力はリスト上の関数にとどまりません。ラベル付き順序ツリーの例でこれを示しましょう。</p>

<p>Rubyにはリストに都合の良いArrayクラスが組込みでありましたが、ツリーに都合の良いものはないので自分でクラスを定義しましょう。ツリーはラベルを持ったノードを連結したものとして表現できるので、この連結の機能をもったNodeクラスを定義することでツリーを表現します。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Node</span>
  <span class="kp">attr_reader</span> <span class="ss">:label</span><span class="p">,</span> <span class="ss">:subtrees</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="o">*</span><span class="n">subtrees</span><span class="p">)</span>
    <span class="vi">@label</span> <span class="o">=</span> <span class="n">label</span>
    <span class="vi">@subtrees</span> <span class="o">=</span> <span class="n">subtrees</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">node</span>
  <span class="o">-&gt;</span><span class="n">label</span><span class="p">,</span><span class="o">*</span><span class="n">subtrees</span><span class="p">{</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="o">*</span><span class="n">subtrees</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div>


<p>ノードオブジェクトは<strong>label</strong>とサブノードのリスト<strong>subtrees</strong>をもつことができます。ここではノードオブジェクトを関数言語風に生成するために、<strong>node関数</strong>(Objectクラスのメソッド)を用意しています。</p>

<p>例えば、</p>

<div class="highlight"><pre><code class="bash">           1 o
            ／ ＼
          ／     ＼
        ／         ＼
     2 o             o 3
                     |
                     |
                     |
                     o  4
</code></pre></div>


<p>というツリーはこのNodeクラスを使って以下のように表現できます。</p>

<div class="highlight"><pre><code class="ruby"><span class="n">tree</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> 
            <span class="n">node</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span>
            <span class="n">node</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="n">node</span><span class="o">[</span><span class="mi">4</span><span class="o">]]</span>
            <span class="o">]</span>

<span class="c1"># &gt;&gt; #&lt;Node:0x0a431c @label=1, @subtrees=[#&lt;Node:0x0a4420 @label=2, @subtrees=[]&gt;, #&lt;Node:0x0a4358 @label=3, @subtrees=[#&lt;Node:0x0a4394 @label=4, @subtrees=[]&gt;]&gt;]&gt;</span>
</code></pre></div>


<p>つまりノード１は２つのノード２，３をサブノードとしてもち、ノード３はノード４をサブノードとしてもっていることが表現されています。nodeの第２引数は省略でき、この場合subtreesの値は[ ]になります。</p>

<p>さてここで、リストで用意したreduceメソッドと同じ目的をツリーで果たす<strong>red_tree</strong>メソッドを定義してみます。</p>

<p>リストのところの説明でreduceがリストを生成するconsとの比較で、consと[ ]をfとaに置き換えたものとみなせると言いました。同じ発想でツリーがリストを含むノードで生成される、つまりnodeとconsと[ ]で生成できることから、red_treeはこれらをfとgとaに置き換えたものとみなせます。</p>

<p>ここでツリーとリストは別のクラスなので、それぞれのクラスの上にred_treeを定義する必要があります。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Node</span>
  <span class="k">def</span> <span class="nf">red_tree</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">f</span><span class="o">[</span><span class="n">label</span><span class="p">,</span> <span class="n">subtrees</span><span class="o">.</span><span class="n">red_tree</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">red_tree</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">a</span> <span class="k">if</span> <span class="n">empty?</span>
    <span class="n">g</span><span class="o">[</span><span class="n">head</span><span class="o">.</span><span class="n">red_tree</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="n">tail</span><span class="o">.</span><span class="n">red_tree</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>ここで最初の引数である関数fはノードオブジェクトの要素に適用され、第２の引数である関数gはリストの要素に適用されます。red_treeと他の関数を貼り合せることで興味深い関数がいくつも定義できるようになります。</p>

<p>次の段階に進む前に、Arrayクラスに定義した有用なメソッド群をNodeクラスにも定義しましょう。ここではNodeクラスに同じものを用意するのではなく、Arrayクラスのそれらのメソッドをモジュールに抽出してNodeクラスでも使えるようにしましょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">Functional</span>
  <span class="k">def</span> <span class="nf">cons</span>
    <span class="o">-&gt;</span><span class="n">x</span><span class="p">,</span><span class="n">ls</span><span class="o">=</span><span class="nb">self</span><span class="p">{</span> <span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+</span> <span class="n">ls</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">append</span>
    <span class="o">-&gt;</span><span class="n">ls2</span><span class="p">,</span><span class="n">ls1</span><span class="o">=</span><span class="nb">self</span><span class="p">{</span> <span class="n">ls2</span><span class="o">.</span><span class="n">reduce</span> <span class="n">cons</span><span class="p">,</span> <span class="n">ls1</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add</span>
    <span class="o">-&gt;</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">{</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">double</span>
    <span class="o">-&gt;</span><span class="n">num</span><span class="p">{</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">num</span> <span class="p">}</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">compose</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">g</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">{</span> <span class="n">f</span><span class="o">[</span><span class="n">g</span><span class="o">[</span><span class="n">x</span><span class="o">]</span><span class="p">,</span><span class="n">y</span><span class="o">]</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Array</span>
  <span class="kp">include</span> <span class="no">Functional</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Node</span>
  <span class="kp">include</span> <span class="no">Functional</span>
<span class="k">end</span>
</code></pre></div>


<p>ここでappendは他の補助メソッドと同様に２つの引数を取るようにし、かつ[]メソッドで実行されるようProcオブジェクト化します。</p>

<p>準備ができたので、まずツリーのラベルの数値をすべて足す<strong>sum_tree</strong>を定義しましょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Node</span>
  <span class="k">def</span> <span class="nf">sum_tree</span>
    <span class="n">red_tree</span> <span class="n">add</span><span class="p">,</span> <span class="n">add</span><span class="p">,</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">tree</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">node</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span>
            <span class="n">node</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="n">node</span><span class="o">[</span><span class="mi">4</span><span class="o">]]</span>
           <span class="o">]</span>
<span class="n">tree</span><span class="o">.</span><span class="n">sum_tree</span> <span class="c1"># =&gt; 10</span>
</code></pre></div>


<p>ツリーのlabel全体のリストは以下のように定義できます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Node</span>
  <span class="k">def</span> <span class="nf">labels</span>
    <span class="n">red_tree</span> <span class="n">cons</span><span class="p">,</span> <span class="n">append</span><span class="p">,</span> <span class="o">[]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">tree</span><span class="o">.</span><span class="n">labels</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</code></pre></div>


<p>最後にリストのmapと類似したメソッドつまり関数fをツリーのすべてのラベルに適用するメソッド<strong>map_tree</strong>を定義します。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Node</span>
  <span class="k">def</span> <span class="nf">map_tree</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">red_tree</span> <span class="n">compose</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">f</span><span class="p">),</span> <span class="n">cons</span><span class="p">,</span> <span class="o">[]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>map_treeを使えば、たとえばラベルの数値を倍にするメソッドを定義できます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Node</span>
  <span class="k">def</span> <span class="nf">double_all</span>
    <span class="n">map_tree</span> <span class="n">double</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">tree</span><span class="o">.</span><span class="n">double_all</span><span class="o">.</span><span class="n">labels</span> <span class="c1"># =&gt; [2, 4, 6, 8]</span>
</code></pre></div>


<p>以上のように高階関数すなわち関数を引数に取ったり、関数を返したりすることができる関数を使うことによって、プログラムを柔軟に多数の汎用的な部品に分割できるようになることが理解できたかと思います。</p>
  </body>
</html>
