<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title>irbから学ぶRubyの並列処理</title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>２章　マルチユーザーREPL</h2>

<p>REPLは１ユーザに対する対話環境です。でも複数ユーザで使えたらもっとうれしいですよね？どうすればいいでしょうか。</p>

<p>そうです、入出力と評価(eval)を切り離せばいいのです。いわゆるクライアント・サーバー方式です。クライアントからの入力をサーバーに渡して評価し、結果をクライアントに出力するという方式です。</p>

<p>では、早速REPLサーバーを書いてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1">#repl_server.rb</span>
<span class="nb">require</span> <span class="s2">&quot;socket&quot;</span>
<span class="n">server</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">60000</span><span class="p">)</span>
<span class="kp">loop</span> <span class="k">do</span>
  <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="n">accept</span>   <span class="c1"># clientからの接続を待つ</span>
  
  <span class="k">begin</span>
    <span class="kp">loop</span> <span class="p">{</span> <span class="n">client</span><span class="o">.</span><span class="n">puts</span> <span class="nb">eval</span> <span class="n">client</span><span class="o">.</span><span class="n">gets</span> <span class="p">}</span>
  <span class="k">rescue</span>
  <span class="k">ensure</span>
    <span class="n">client</span><span class="o">.</span><span class="n">close</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>Rubyならこんなにも簡単に書けてしまいます。TCPServer.newでサーバーインスタンスを生成し、acceptメソッドでクライアントからの接続を待ち受けます。クライアントが接続したら、getsでユーザからの入力を評価し結果をユーザに返す。接続したクライアント(これをソケットと呼ぶよ)からgetsし、ソケットにputsしてるところがポイントです。</p>

<p>$stdin $stdoutの参照先をクライアントのソケットに切り替えるやり方にすると、最初のコードとの違いがはっきりするでしょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1">#repl_server.rb</span>
<span class="nb">require</span> <span class="s2">&quot;socket&quot;</span>
<span class="n">server</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">60000</span><span class="p">)</span>
<span class="kp">loop</span> <span class="k">do</span>
  <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="n">accept</span>
  <span class="k">begin</span>
    <span class="vg">$stdin</span><span class="p">,</span> <span class="vg">$stdout</span> <span class="o">=</span> <span class="n">client</span><span class="p">,</span> <span class="n">client</span>
    <span class="kp">loop</span> <span class="p">{</span> <span class="nb">puts</span> <span class="nb">eval</span> <span class="nb">gets</span> <span class="p">}</span>
  <span class="k">rescue</span>
  <span class="k">ensure</span>
    <span class="n">client</span><span class="o">.</span><span class="n">close</span>
    <span class="vg">$stdin</span> <span class="o">=</span> <span class="no">STDIN</span>
    <span class="vg">$stdout</span> <span class="o">=</span> <span class="no">STDOUT</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>ensure節ではこれらの後処理をしています。</p>

<p>サーバーを立ち上げてクライアントから接続してみましょう。telnetを使います。</p>

<div class="highlight"><pre><code class="sh"><span class="nv">$ </span>telnet localhost 60000
Trying 127.0.0.1...
Connected to localhost.
Escape character is <span class="s1">&#39;^]&#39;</span>.
3.times.map <span class="o">{</span> <span class="s2">&quot;Hello, friend&quot;</span> <span class="o">}</span>
Hello, friend
Hello, friend
Hello, friend
</code></pre></div>


<p>いい感じですね。<code>Ctrl+]</code>に続き<code>quit</code>でtelnetの接続を切ります。</p>
  </body>
</html>
