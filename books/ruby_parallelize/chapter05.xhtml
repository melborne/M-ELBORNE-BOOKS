<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title>irbから学ぶRubyの並列処理</title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>４章　並列化REPL　その２</h2>

<h3>Reactorパターンによる並列化</h3>

<p>４つ目はReactorパターンを使って並列化する方法です。Reactorパターンというのは簡単に言うと、一箇所でいろいろなイベントを待ち受けて、イベントが来たらこれに反応(リアクト)して、その種類に応じた処理を実行するモデルのことです。RubyでReactorパターンを実現するには、IO.selectメソッド(またはKernel#select)を使います。</p>

<p>早速、Reactor版REPLサーバーを書いてみます。REPLサーバーにおけるイベントにはサーバーに対するものつまりクライアントの接続と、クライアントに対するものつまりソケットへのデータ入力があります。これらをsocketsという配列で管理しましょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s2">&quot;socket&quot;</span>
<span class="n">server</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">60000</span><span class="p">)</span>
<span class="n">sockets</span> <span class="o">=</span> <span class="o">[</span><span class="n">server</span><span class="o">]</span>
<span class="kp">loop</span> <span class="k">do</span>
  <span class="n">r_sockets</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">sockets</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># すべてのイベントを待ち受ける</span>
  <span class="n">r_sockets</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">socket</span><span class="o">|</span>
    <span class="k">case</span> <span class="n">socket</span>
    <span class="k">when</span> <span class="no">TCPServer</span>     <span class="c1"># サーバーに対するクライアントの接続があったとき</span>
      <span class="n">client</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">accept</span>
      <span class="n">sockets</span> <span class="o">&lt;&lt;</span> <span class="n">client</span>
    <span class="k">when</span> <span class="no">TCPSocket</span>     <span class="c1"># クライアントに対するデータ入力があったとき</span>
      <span class="k">unless</span> <span class="n">socket</span><span class="o">.</span><span class="n">eof?</span>
        <span class="n">socket</span><span class="o">.</span><span class="n">puts</span> <span class="nb">eval</span> <span class="n">socket</span><span class="o">.</span><span class="n">gets</span>
      <span class="k">else</span>
        <span class="n">socket</span><span class="o">.</span><span class="n">close</span>
        <span class="n">sockets</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>IO.selectは登録したソケットに対する入力／出力／例外のイベントを待ち受け、そのイベントが発生したソケットを返しますが、返り値はイベント別のソケットの配列になっています。ここでは入力イベントだけに関心があるから、配列の第一要素のみ取り出しています。</p>

<p>そしてcase式でイベントのあったソケットの種類に応じて処理を切り分けています。つまりサーバーがクライアントからの接続を受けたときは、TCPServerの節に入ってsockets配列に接続のあったクライアントが登録され、ループでselectに戻って次のイベントを待ちます。最初のクライアントの接続時には、sockets配列にはserverしか登録されていないので、処理は必ずここに来ることになります。</p>

<p>一方、クライアントにデータの入力があったときは、TCPSocketの節に入って入力データの処理をします。入力データがあるときはそれを評価し結果を返し、無いときはソケットを閉じてその接続を解放します。そしてループでまたselectに戻って次のイベントを待ちます。</p>

<p>Reactorパターンでは、すべてのクライアントの接続は維持されたままなのに、処理が並走しないつまり単一プロセス単一スレッドで、複数クライアントからの要求に応じることができる、という点がユニークです。このモデルなら処理が並走することはないので、共有データを書き換えるようなことも簡単にできますね。</p>

<h3>EventMachineによる並列化</h3>

<p>ただ、when式でのソケットの切り分け処理が面倒といえば面倒です。でも安心してください。<code>EventMachine</code>というライブラリを使えば、これが驚異的に簡単にできてしまうのです。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s2">&quot;eventmachine&quot;</span>
<span class="no">EM</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span>
  <span class="no">EM</span><span class="o">.</span><span class="n">start_server</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">60000</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
    <span class="k">def</span> <span class="nc">c</span><span class="o">.</span><span class="nf">receive_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="n">send_data</span> <span class="nb">eval</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>EventMachineはRreactorパターンによる、イベント駆動型のI/Oインタフェースを提供するライブラリです。JavaScriptの<code>Node.js</code>のようなものですね。</p>

<p>もうコードを見れば分かると思いますが、EM.runでイベントループが開始されて、クライアントからのデータ入力があると、receive_dataメソッドが呼び出されるので、ここでsend_dataを呼んでevalした入力を返せばいいのです。</p>

<p>EventMachineを使えば、チャットサーバーも簡単に書けてしまいます。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s2">&quot;eventmachine&quot;</span>
<span class="k">module</span> <span class="nn">Chat</span>
  <span class="vc">@@channel</span> <span class="o">=</span> <span class="no">EM</span><span class="o">::</span><span class="no">Channel</span><span class="o">.</span><span class="n">new</span>
  <span class="k">def</span> <span class="nf">post_init</span>
    <span class="nb">puts</span> <span class="s2">&quot;-- someone connected&quot;</span>
    <span class="vi">@sid</span> <span class="o">=</span> <span class="vc">@@channel</span><span class="o">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="o">|</span><span class="n">data</span><span class="o">|</span> <span class="n">send_data</span> <span class="s2">&quot;&gt;&gt; </span><span class="si">#{</span><span class="n">data</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">receive_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="vc">@@channel</span><span class="o">.</span><span class="n">push</span> <span class="n">data</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">unbind</span>
    <span class="nb">puts</span> <span class="s2">&quot;-- someone disconnected from the server&quot;</span>
    <span class="vc">@@channel</span><span class="o">.</span><span class="n">unsubscribe</span><span class="p">(</span><span class="vi">@sid</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">EM</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span>
  <span class="no">EM</span><span class="o">.</span><span class="n">start_server</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">60000</span><span class="p">,</span> <span class="no">Chat</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>


<p>EMサーバーはクライアントの接続があるたびにその引数でセットしたChatモジュールをインスタンス化して、その監視対象として登録します。各インスタンスのpost_initメソッドはその接続時に、unbindメソッドはその切断時に呼び出され、receive_dataは先の例と同様にデータ受信時に呼び出されます。</p>

<p>データをブロードキャストするにはEM::Channelを使います。subscribeでそのクライアントに対する処理を登録して、pushで呼び出せばいいです。</p>

<p><code>gem install eventmachine</code>して、telnetから試してみてください。</p>

<h3>WebSocket</h3>

<p>ここまでくるとWeb上でもこの並列化技術を使いたい、と考えるのが人情です。そう、これこそがWebSocketなのです。</p>

<p>そしてうれしいことに、EventMachineにはそのためのプラグイン<code>em-websocket</code>があります。<code>gem install em-websocket</code>して使います。サーバー側のコードは次のような感じになります。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;em-websocket&#39;</span>
<span class="no">EM</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
  <span class="vi">@channel</span> <span class="o">=</span> <span class="no">EM</span><span class="o">::</span><span class="no">Channel</span><span class="o">.</span><span class="n">new</span>
  <span class="no">EM</span><span class="o">::</span><span class="no">WebSocket</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="mi">60000</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ws</span><span class="o">|</span>
    <span class="n">sid</span> <span class="o">=</span> <span class="kp">nil</span>
    <span class="n">ws</span><span class="o">.</span><span class="n">onopen</span> <span class="p">{</span> <span class="n">sid</span> <span class="o">=</span> <span class="vi">@channel</span><span class="o">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="n">ws</span><span class="o">.</span><span class="n">send</span> <span class="n">msg</span> <span class="p">}</span> <span class="p">}</span>
    <span class="n">ws</span><span class="o">.</span><span class="n">onmessage</span> <span class="p">{</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="vi">@channel</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">sid</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
    <span class="n">ws</span><span class="o">.</span><span class="n">onclose</span> <span class="p">{</span> <span class="vi">@channel</span><span class="o">.</span><span class="n">unsubscribe</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="p">}</span>
</code></pre></div>


<p>EM::WebSocket.startでサーバーインスタンスを立ち上げて、クライアントからの接続を待ち受けます。クライアントからの接続があるとonopenが呼ばれるので、ここでchannelにメッセージをブロードキャストする処理を登録します。クライアントがテキストを送信するとonmessageが呼ばれるので、それをchannelにpushして登録した処理を呼びます。</p>

<p>次にクライアントサイドのコードです。</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="kd">function</span> <span class="nx">debug</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#debug&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;p&gt;&quot;</span><span class="o">+</span><span class="nx">str</span><span class="o">+</span><span class="s2">&quot;&lt;/p&gt;&quot;</span><span class="p">)</span> <span class="p">};</span>
        
        <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s2">&quot;ws://localhost:60000/&quot;</span><span class="p">);</span>
        <span class="nx">ws</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;Welcome to Chattata!&quot;</span><span class="p">)</span> <span class="p">};</span>
        <span class="nx">ws</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#msglist&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;p&gt;&quot;</span><span class="o">+</span><span class="nx">evt</span><span class="p">.</span><span class="nx">data</span><span class="o">+</span><span class="s2">&quot;&lt;/p&gt;&quot;</span><span class="p">)</span> <span class="p">};</span>
        <span class="nx">ws</span><span class="p">.</span><span class="nx">onclose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;socket closed&quot;</span><span class="p">)</span> <span class="p">};</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
          <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input#msg&quot;</span><span class="p">);</span>
          <span class="nx">ws</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">val</span><span class="p">());</span>
          <span class="nx">msg</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
          <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;debug&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;form&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;msg&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;&lt;/input&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;msglist&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>


<p>クライアント側では、サーバーに接続するソケットをインスタンス化します。ユーザがテキストを送信すると$("form").submitが呼ばれ、その内容はws.sendでソケットに送り出されます。これによってサーバー側のchannelに登録された処理が呼ばれ、接続されているクライアントにテキストがブロードキャストされるようになります。クライアント側ではこれをonmessageで受けて、テキストをwindow上に表示します。</p>

<p>では試してみましょう。</p>

<p><img src="images/browser.png" alt="Alt title" /></p>

<br clear='all' />


<p>良い感じですね！</p>

<p>WebSocketはHTML5の新しい規格なので対応ブラウザか確認してください。</p>
  </body>
</html>
