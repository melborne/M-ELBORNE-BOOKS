<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title>知って得する！５５のRubyのトリビアな記法</title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>38. BasicObject#instance_eval</h2>

<p><code>instance_eval</code>はオブジェクトの生成をDSL風にするときに良く使われています。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="nb">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">job</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
    <span class="vi">@job</span> <span class="o">=</span> <span class="n">job</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">profile</span>
    <span class="o">[</span><span class="vi">@name</span><span class="p">,</span> <span class="vi">@age</span><span class="p">,</span> <span class="vi">@job</span><span class="o">]</span> <span class="o">*</span> <span class="s1">&#39;-&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">t</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
  <span class="nb">name</span> <span class="s1">&#39;Charlie&#39;</span>
  <span class="n">age</span>  <span class="mi">13</span>
  <span class="n">job</span>  <span class="ss">:programmer</span>
<span class="k">end</span>

<span class="n">t</span><span class="o">.</span><span class="n">profile</span> <span class="c1"># =&gt; &quot;Charlie-13-programmer&quot;</span>
</code></pre></div>


<p>しかし、このコンテキストを一時的に切り替えるこの機能はDSL以外でも便利に使えるのです。テストの結果の平均値を求めてみます。まずは普通のやり方で。</p>

<div class="highlight"><pre><code class="ruby"><span class="n">scores</span> <span class="o">=</span> <span class="o">[</span><span class="mi">56</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">65</span><span class="o">]</span>
<span class="n">scores</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">scores</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 69</span>
</code></pre></div>


<p>短いコードで変数scoresが３回も出てきます。</p>

<p>instance_evalを使うと、scoreを消すことができます。</p>

<div class="highlight"><pre><code class="ruby"><span class="o">[</span><span class="mi">56</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">65</span><span class="o">].</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span> <span class="p">}</span> <span class="c1"># =&gt; 69</span>
</code></pre></div>


<p>さらに標準偏差sdを求めてみます。まず普通に。</p>

<div class="highlight"><pre><code class="ruby"><span class="n">scores</span> <span class="o">=</span> <span class="o">[</span><span class="mi">56</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">65</span><span class="o">]</span>
<span class="n">avg</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">scores</span><span class="o">.</span><span class="n">size</span>
<span class="n">sigmas</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="p">(</span><span class="n">avg</span> <span class="o">-</span> <span class="n">n</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="p">}</span>
<span class="n">sd</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">sigmas</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">scores</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="c1"># =&gt; 14.247806848775006</span>
</code></pre></div>


<p>instance_evalで。</p>

<div class="highlight"><pre><code class="ruby"><span class="n">scores</span> <span class="o">=</span> <span class="o">[</span><span class="mi">56</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">65</span><span class="o">]</span>
<span class="n">sd</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
  <span class="n">avg</span> <span class="o">=</span> <span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span>
  <span class="n">sigmas</span> <span class="o">=</span> <span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="p">(</span><span class="n">avg</span> <span class="o">-</span> <span class="n">n</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="p">}</span>
  <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">sigmas</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span><span class="p">)</span>
<span class="k">end</span>
<span class="n">sd</span> <span class="c1"># =&gt; 14.247806848775006</span>
</code></pre></div>


<p>中間的な変数をブロック内に閉じ込められる上、ブロックで式がまとまって見やすくありませんか？</p>
  </body>
</html>
