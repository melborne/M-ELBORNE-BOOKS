<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2 id="version28" class="version">バージョン28（ユニークワードの抽出）</h2>


<p>さてこれらの演算子を使って何かしたいですね...</p>

<p>いいのを思いつきました。</p>

<p>ある小説を元にしたオブジェクトから、基本単語からなるオブジェクトを差し引けば、その小説にユニークな単語が抽出できるかもしれません。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">class</span> <span class="nc">WordDictionary</span>

   <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">regexp</span><span class="p">)</span>
     <span class="n">text</span> <span class="o">=</span>
        <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="n">word</span> <span class="o">=~</span> <span class="n">regexp</span> <span class="p">}</span>
                 <span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="n">freq</span><span class="p">)</span> <span class="p">:</span> <span class="n">freq</span> <span class="p">}</span>
                 <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">*</span> <span class="n">freq</span> <span class="p">}</span>
                 <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
     <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
   <span class="k">end</span>

   <span class="k">def</span> <span class="nf">uniq_words</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">*</span><span class="n">base</span><span class="p">)</span>
     <span class="n">base</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">_self</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">_self</span> <span class="o">-</span> <span class="n">b</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">freq</span><span class="o">|</span> <span class="n">freq</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">}</span>  <span class="p">}</span><span class="o">.</span><span class="n">top_by_frequency</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
   <span class="k">end</span>
 <span class="k">end</span>
</code></pre></div>


<p>uniq_wordsは個数nと複数の基本単語オブジェクトbaseを取って、そのオブジェクトに固有のワードトップnを出力します。injectメソッドのブロックの中で先ほど定義した-メソッドを使っています。</p>

<p>ここでselectメソッドを使ってbaseオブジェクトにおける、対象単語をその頻度が10以上のものに限定することで、baseオブジェクトにおけるゴミ(基本単語でないもの)をある程度排除するようにしています。そのためselectメソッドをブロックを取れるように修正しました。</p>

<p>さて、早速「不思議の国のアリス」のユニークなワードを出力してみましょう。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">if</span> <span class="vg">$0</span> <span class="o">==</span> <span class="bp">__FILE__</span>
  <span class="n">base</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;public/base.txt&#39;</span><span class="p">)</span>
  <span class="n">alice</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;public/alice.txt&#39;</span><span class="p">)</span>
  <span class="nb">p</span> <span class="n">alice</span><span class="o">.</span><span class="n">uniq_words</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span>
 <span class="k">end</span> 
 <span class="o">&gt;</span><span class="c1"># Argument has assumed as a text string</span>
 <span class="o">&gt;</span><span class="c1"># Argument has assumed as a text string</span>
 <span class="o">&gt;</span><span class="c1"># [[&quot;alice&quot;, 403], [&quot;turtle&quot;, 59], [&quot;mock&quot;, 56], [&quot;hatter&quot;, 56], [&quot;gryphon&quot;, 55], [&quot;rabbit&quot;, 51], [&quot;got&quot;, 45], [&quot;mouse&quot;, 44], [&quot;duchess&quot;, 42], [&quot;tone&quot;, 40], [&quot;dormouse&quot;, 40], [&quot;cat&quot;, 37], [&quot;hare&quot;, 31], [&quot;caterpillar&quot;, 28], [&quot;jury&quot;, 22], [&quot;sort&quot;, 20], [&quot;tea&quot;, 19], [&quot;soup&quot;, 18], [&quot;bill&quot;, 17], [&quot;hastily&quot;, 16], [&quot;bit&quot;, 16], [&quot;doesn&quot;, 16], [&quot;didn&quot;, 14], [&quot;dinah&quot;, 14], [&quot;anxiously&quot;, 14], [&quot;baby&quot;, 14], [&quot;footman&quot;, 14], [&quot;trying&quot;, 14], [&quot;cook&quot;, 13], [&quot;wouldn&quot;, 13]]</span>
</code></pre></div>


<p>なんかいい感じじゃないですか！</p>

<p>なお最後のif $0 == __FILE__ はこのスクリプトを他のスクリプトからrequireしたときにはこの部分が、require先で実行されないようにするための技法です。$0はrubyインタプリタに渡したスクリプト名__FILE__はこのスクリプト名を参照します。</p>
  </body>
</html>
