<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>


<h2 id="version29" class="version">バージョン29（仕上げ）</h2>


<p>でも、さっきからうっとうしい文字が一緒に出力されていますね。オブジェクトを内部で再構築するとき文字列を渡すのでそれが原因です。フラグを立ててこれに対処します。</p>

<p>WordDictionaryクラス内部でオブジェクトを生成するときはinner_callにtrueを渡して、"Argument has..."のメッセージがでないようにします。</p>

<p>ついでに最後の仕上げとして、クラスは入力データの名前nameを受け取れるようにし、また総単語種数を出力するsizeメソッドも定義しましょう。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">class</span> <span class="nc">WordDictionary</span>
   <span class="n">att_reader</span> <span class="ss">:words</span><span class="p">,</span> <span class="ss">:name</span>
   <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="n">inner_call</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
     <span class="n">input</span> <span class="o">=</span> <span class="n">input_to_string</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">inner_call</span><span class="p">)</span>
     <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
   <span class="k">end</span>
   <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">regexp</span><span class="p">)</span>
     <span class="n">text</span> <span class="o">=</span> <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="n">word</span> <span class="o">=~</span> <span class="n">regexp</span> <span class="p">}</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="n">freq</span><span class="p">)</span> <span class="p">:</span> <span class="n">freq</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">*</span> <span class="n">freq</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
     <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="vi">@name</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
   <span class="k">end</span>
   
   <span class="k">def</span> <span class="nf">size</span>
     <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">length</span>
   <span class="k">end</span>
   <span class="kp">private</span>
   <span class="k">def</span> <span class="nf">input_to_string</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">inner_call</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">input</span>
    <span class="k">when</span> <span class="nb">String</span>
      <span class="k">begin</span>
        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
      <span class="k">rescue</span>
        <span class="nb">puts</span> <span class="s2">&quot;Argument has assumed as a text string&quot;</span> <span class="k">unless</span> <span class="n">inner_call</span>
        <span class="n">input</span>
      <span class="k">end</span>
    <span class="k">end</span>
   <span class="k">end</span>
   <span class="k">def</span> <span class="nf">arithmetics</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
     <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@words</span><span class="o">.</span><span class="n">send</span> <span class="n">op</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">words</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
     <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
   <span class="k">end</span>
 <span class="k">end</span>
</code></pre></div>


<p>さあこれで完成です！完成したスクリプト全体を眺めてみましょう。</p>

<div class="highlight"><pre><code class="ruby"> <span class="nb">require</span> <span class="s2">&quot;open-uri&quot;</span>
  <span class="k">module</span> <span class="nn">Enumerable</span>
    <span class="k">def</span> <span class="nf">take_by</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span>
      <span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="k">yield</span> <span class="n">elem</span> <span class="p">}</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">nth</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="k">class</span> <span class="nc">WordDictionary</span>
    <span class="kp">include</span> <span class="no">Enumerable</span>
    <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:words</span>
 
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="nb">name</span><span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">,</span> <span class="n">inner_call</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
      <span class="n">input</span> <span class="o">=</span> <span class="n">input_to_string</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">inner_call</span><span class="p">)</span>
      <span class="vi">@words</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[a-z&#39;]+/</span><span class="p">)</span>
      <span class="vi">@freq_dic</span> <span class="o">=</span> <span class="vi">@words</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">dic</span><span class="p">,</span> <span class="n">word</span><span class="o">|</span> <span class="n">dic</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">dic</span> <span class="p">}</span>
      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">each</span>
      <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="k">yield</span> <span class="n">elem</span> <span class="p">}</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">top_by_frequency</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
      <span class="n">take_by_value</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span> <span class="p">},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">bottom_by_frequency</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
      <span class="n">take_by_value</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="p">},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">top_by_length</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
      <span class="n">list</span> <span class="o">=</span> <span class="n">take_by_key</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="o">-</span><span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="p">},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
      <span class="n">list</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="o">[</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="p">,</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="o">]</span> <span class="p">}</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">regexp</span><span class="p">)</span>
      <span class="n">text</span> <span class="o">=</span> <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="n">word</span> <span class="o">=~</span> <span class="n">regexp</span> <span class="p">}</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="n">freq</span><span class="p">)</span> <span class="p">:</span> <span class="n">freq</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">*</span> <span class="n">freq</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
      <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="vi">@name</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
    <span class="k">end</span>
 
    <span class="k">def</span> <span class="nf">to_s</span>
      <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">to_s</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">size</span>
      <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">length</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
      <span class="n">arithmetics</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">-</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
      <span class="n">arithmetics</span><span class="p">(</span><span class="ss">:-</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">&amp;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
      <span class="n">arithmetics</span><span class="p">(</span><span class="ss">:&amp;</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">|</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
      <span class="n">arithmetics</span><span class="p">(</span><span class="ss">:|</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">uniq_words</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">*</span><span class="n">base</span><span class="p">)</span>
      <span class="n">base</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">_self</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">_self</span> <span class="o">-</span> <span class="n">b</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">freq</span><span class="o">|</span> <span class="n">freq</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">}</span>  <span class="p">}</span><span class="o">.</span><span class="n">top_by_frequency</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="kp">protected</span> <span class="ss">:words</span> 
    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">input_to_string</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">inner_call</span><span class="p">)</span>
     <span class="k">case</span> <span class="n">input</span>
     <span class="k">when</span> <span class="sr">/^http/</span>
       <span class="k">begin</span>
         <span class="nb">open</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
       <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
         <span class="nb">puts</span> <span class="n">e</span>
         <span class="nb">exit</span>
       <span class="k">end</span>
     <span class="k">when</span> <span class="nb">String</span>
       <span class="k">begin</span>
         <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
       <span class="k">rescue</span>
         <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Argument has assumed as a text string&quot;</span> <span class="k">unless</span> <span class="n">inner_call</span>
         <span class="n">input</span>
       <span class="k">end</span>
     <span class="k">when</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">class</span>
       <span class="n">input</span><span class="o">.</span><span class="n">read</span>
     <span class="k">else</span>
       <span class="k">raise</span> <span class="s2">&quot;Wrong argument. ARGF, file or string are acceptable.&quot;</span>
     <span class="k">end</span>
    <span class="k">end</span>
   
    <span class="k">def</span> <span class="nf">take_by_value</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
      <span class="n">val</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="p">}</span>
      <span class="n">take_by_key_or_val</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">take_by_key</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
      <span class="n">key</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="p">}</span>
      <span class="n">take_by_key_or_val</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="k">end</span>
  
    <span class="k">def</span> <span class="nf">take_by_key_or_val</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="n">by</span><span class="p">)</span>
      <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="p">:</span> <span class="n">val</span> <span class="p">}</span><span class="o">.</span><span class="n">take_by</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">sort_opt</span><span class="o">[</span><span class="n">by</span><span class="o">[</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">]]</span> <span class="p">}</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">arithmetics</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@words</span><span class="o">.</span><span class="n">send</span> <span class="n">op</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">words</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
      <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">pretty_print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">max_stars</span> <span class="o">=</span> <span class="mi">60</span>
    <span class="n">max_value</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">max_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="n">freq</span> <span class="p">}</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span>
      <span class="n">stars</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span> <span class="o">*</span> <span class="p">(</span><span class="n">max_stars</span> <span class="o">*</span> <span class="p">(</span><span class="n">freq</span><span class="o">/</span><span class="n">max_value</span><span class="o">.</span><span class="n">to_f</span><span class="p">))</span><span class="o">.</span><span class="n">ceil</span>
      <span class="nb">printf</span> <span class="s2">&quot;%5d:%-5s %s</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">freq</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">stars</span>
    <span class="k">end</span>
  <span class="k">end</span>
 
 <span class="k">if</span> <span class="vg">$0</span> <span class="o">==</span> <span class="bp">__FILE__</span>
  <span class="n">base</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;public/base.txt&#39;</span><span class="p">)</span>
  <span class="n">alice</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;public/alice.txt&#39;</span><span class="p">,</span> <span class="s2">&quot;Alice&#39;s Adventures in Wonderland&quot;</span><span class="p">)</span>
  <span class="n">jp_history</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;public/japanese_history.txt&#39;</span><span class="p">)</span>
  <span class="nb">p</span> <span class="n">alice</span><span class="o">.</span><span class="n">uniq_words</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span>
  <span class="nb">p</span> <span class="n">jp_history</span><span class="o">.</span><span class="n">uniq_words</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span>
 <span class="k">end</span>
</code></pre></div>



  </body>
</html>
