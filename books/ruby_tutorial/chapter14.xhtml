<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2 id="version07" class="version">バージョン07（Enumerable#take_byの定義）</h2>


<p>更に欲が出てきました。このtake_byというメソッドを配列でも使いたくなりました。</p>

<p>実は先のsort_byというメソッドはHashクラスにもArrayクラスにも定義されていません。それが定義されているのはEnumerableというモジュールです。モジュールというのはクラスの亜種です。オブジェクトを生成できないクラスです。飛べない鳥ニワトリのようなものです（説明のためモジュールおよびニワトリに対するこのような差別的発言をお許しください）。</p>

<p>EnumerableモジュールをHashおよびArrayクラスにインクルードすることで、sort_byの夢のコラボが実現しています。</p>

<p>我らtake_byにも夢を実現させましょう。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">module</span> <span class="nn">Enumerable</span>
   <span class="k">def</span> <span class="nf">take_by</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span>
     <span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="k">yield</span> <span class="n">elem</span> <span class="p">}</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span>
   <span class="k">end</span>
 <span class="k">end</span>
 
 <span class="no">WORDS</span> <span class="o">=</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[a-z]+/</span><span class="p">)</span>
 <span class="no">DICTIONARY</span> <span class="o">=</span> <span class="no">WORDS</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">dic</span><span class="p">,</span> <span class="n">word</span><span class="o">|</span> <span class="n">dic</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">dic</span> <span class="p">}</span>
 <span class="nb">p</span> <span class="no">DICTIONARY</span><span class="o">.</span><span class="n">take_by</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="o">-</span><span class="n">val</span> <span class="p">}</span>
 <span class="nb">p</span> <span class="no">WORDS</span><span class="o">.</span><span class="n">take_by</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="o">-</span><span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="p">}</span>
 
 <span class="c1">#&gt; [[&quot;the&quot;, 16077], [&quot;of&quot;, 9823], [&quot;and&quot;, 7482], [&quot;to&quot;, 7098], [&quot;in&quot;, 4456], [&quot;a&quot;, 3841], [&quot;that&quot;, 3161], [&quot;was&quot;, 3040], [&quot;it&quot;, 2919], [&quot;i&quot;, 2881], [&quot;her&quot;, 2550], [&quot;she&quot;, 2313], [&quot;as&quot;, 2134], [&quot;you&quot;, 2071], [&quot;not&quot;, 2057], [&quot;be&quot;, 2044], [&quot;is&quot;, 2033], [&quot;his&quot;, 2009], [&quot;he&quot;, 1940], [&quot;for&quot;, 1927], [&quot;with&quot;, 1875], [&quot;on&quot;, 1638], [&quot;had&quot;, 1567], [&quot;but&quot;, 1519], [&quot;s&quot;, 1495], [&quot;all&quot;, 1363], [&quot;at&quot;, 1344], [&quot;by&quot;, 1308], [&quot;this&quot;, 1249], [&quot;have&quot;, 1201]]</span>
 <span class="c1">#&gt; [&quot;communicativeness&quot;, &quot;congregationalist&quot;, &quot;indestructibility&quot;, &quot;disinterestedness&quot;, &quot;misrepresentation&quot;, &quot;superciliousness&quot;, &quot;unenforceability&quot;, &quot;unenforceability&quot;, &quot;incomprehensible&quot;, &quot;inextinguishable&quot;, &quot;discontentedness&quot;, &quot;internationalism&quot;, &quot;incomprehensible&quot;, &quot;unenforceability&quot;, &quot;congratulations&quot;, &quot;acknowledgments&quot;, &quot;accomplishments&quot;, &quot;unrighteousness&quot;, &quot;condescendingly&quot;, &quot;congratulations&quot;, &quot;transformations&quot;, &quot;merchantibility&quot;, &quot;notwithstanding&quot;, &quot;congratulations&quot;, &quot;recommendations&quot;, &quot;appropriateness&quot;, &quot;congratulations&quot;, &quot;contemporaneous&quot;, &quot;comprehensively&quot;, &quot;thoughtlessness&quot;]</span>
</code></pre></div>


<p>すばらしい！</p>

<p>配列オブジェクトを指すWORDSに対して、ワード長降順の条件でtake_byメソッドを呼んでいます。</p>

<p>実はわたくし最頻出ワードよりも最長ワードに興味があったのですよ。'incomprehensibleなcongregationalist'になりたい！そんな今日この頃です...</p>

<p>さて...</p>

<p>もう終わりでしょうか？気になる人には気になるところは、もうないでしょうか。</p>
  </body>
</html>
