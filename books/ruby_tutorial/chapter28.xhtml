<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>


<h2 id="version21" class="version">バージョン21（メソッドの追加）</h2>


<p>もう少し実用的なメソッドも追加しましょう。</p>

<p>オブジェクトを読みやすいかたちで出力するto_sメソッドと、オブジェクトの部分オブジェクトを返すselectメソッドを定義します。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">class</span> <span class="nc">WordDictionary</span>
   <span class="k">def</span> <span class="nf">to_s</span>
     <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">to_s</span>
   <span class="k">end</span>
   <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">regexp</span><span class="p">)</span>
     <span class="n">text</span> <span class="o">=</span> <span class="vi">@words</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">=~</span> <span class="n">regexp</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
     <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
   <span class="k">end</span>
 <span class="k">end</span>
</code></pre></div>


<p>次の例はselectメソッドにより、先頭がxyzの何れかで始まる語の集合からなる新しいWordDictionaryオブジェクトを生成し、これをto_sメソッドで出力しています。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">wdic</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGF</span><span class="p">)</span>
 <span class="nb">puts</span> <span class="n">xyz_dic</span> <span class="o">=</span> <span class="n">wdic</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="sr">/^[xyz]/</span><span class="p">)</span>
 <span class="nb">p</span> <span class="n">xyz_dic</span><span class="o">.</span><span class="n">top_by_length</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="c1">#&gt; {&quot;you&quot;=&gt;2071, &quot;yes&quot;=&gt;90, &quot;zealand&quot;=&gt;1, &quot;your&quot;=&gt;597, &quot;yourself&quot;=&gt;60, &quot;yesterday&quot;=&gt;18, &quot;yet&quot;=&gt;163, &quot;young&quot;=&gt;144, &quot;yer&quot;=&gt;4, &quot;ye&quot;=&gt;90, &quot;yelp&quot;=&gt;1, &quot;youth&quot;=&gt;17, &quot;yawned&quot;=&gt;3, &quot;zigzag&quot;=&gt;1, &quot;yours&quot;=&gt;26, &quot;yards&quot;=&gt;2, &quot;year&quot;=&gt;124, &quot;yawning&quot;=&gt;3, &quot;x&quot;=&gt;2, &quot;yelled&quot;=&gt;1, &quot;xi&quot;=&gt;1, &quot;xii&quot;=&gt;3, &quot;yard&quot;=&gt;1, &quot;years&quot;=&gt;226, &quot;zip&quot;=&gt;3, &quot;youngest&quot;=&gt;15, &quot;younger&quot;=&gt;30, &quot;yielding&quot;=&gt;4, &quot;yield&quot;=&gt;8, &quot;yawn&quot;=&gt;2, &quot;york&quot;=&gt;13, &quot;yourselves&quot;=&gt;5, &quot;younge&quot;=&gt;4, &quot;youths&quot;=&gt;1, &quot;yielded&quot;=&gt;5, &quot;yale&quot;=&gt;4, &quot;zeph&quot;=&gt;3, &quot;zephaniah&quot;=&gt;1, &quot;zech&quot;=&gt;2, &quot;zion&quot;=&gt;4, &quot;zealots&quot;=&gt;3, &quot;zinzendorf&quot;=&gt;6, &quot;xxxiii&quot;=&gt;1, &quot;xxv&quot;=&gt;3, &quot;xxvi&quot;=&gt;1, &quot;y&quot;=&gt;8, &quot;zama&quot;=&gt;1, &quot;zealous&quot;=&gt;2, &quot;xiii&quot;=&gt;8, &quot;yea&quot;=&gt;6, &quot;zinzendorfs&quot;=&gt;1, &quot;xenophon&quot;=&gt;3, &quot;youthful&quot;=&gt;1, &quot;yearly&quot;=&gt;2, &quot;xxix&quot;=&gt;1, &quot;xh&quot;=&gt;1, &quot;zoroaster&quot;=&gt;2, &quot;xciii&quot;=&gt;1, &quot;zeal&quot;=&gt;2, &quot;zambezi&quot;=&gt;1, &quot;xerxes&quot;=&gt;11, &quot;xv&quot;=&gt;1, &quot;yellow&quot;=&gt;1, &quot;xxiii&quot;=&gt;1}</span>

<span class="c1">#&gt; [[&quot;zinzendorfs&quot;, 1, 11], [&quot;zinzendorf&quot;, 6, 10], [&quot;yourselves&quot;, 5, 10], [&quot;zoroaster&quot;, 2, 9], [&quot;zephaniah&quot;, 1, 9]]</span>
</code></pre></div>


<p>++++++++++++++++++++++++++++++++++++++++++++++</p>

<p>さてずいぶんと長い道のりを来ました。スクリプトは一時僅か3行にまで短くできたのに、現在80行を超えるまでに肥大化しました。ワードエコではありません。</p>

<p>ここで最初のコードと3行のコードと、現在のコードとを見比べてみましょうか。</p>

<p>（バージョン01）</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">dic</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
 <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">gets</span>
   <span class="n">line</span><span class="o">.</span><span class="n">downcase!</span>
   <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/[a-z]+/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
     <span class="n">word</span> <span class="o">=</span> <span class="vg">$&amp;</span>
     <span class="n">dic</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
   <span class="k">end</span>
 <span class="k">end</span>
 <span class="nb">p</span> <span class="n">dic</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">30</span><span class="o">]</span>
</code></pre></div>


<p>（バージョン03）</p>

<div class="highlight"><pre><code class="ruby"> <span class="no">WORDS</span> <span class="o">=</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[a-z]+/</span><span class="p">)</span>
 <span class="no">DICTIONARY</span> <span class="o">=</span> <span class="no">WORDS</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">dic</span><span class="p">,</span> <span class="n">word</span><span class="o">|</span> <span class="n">dic</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">dic</span> <span class="p">}</span>
 <span class="nb">p</span> <span class="no">DICTIONARY</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">30</span><span class="o">]</span>
</code></pre></div>


<p>（バージョン21）</p>

<div class="highlight"><pre><code class="ruby"> <span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
 <span class="k">module</span> <span class="nn">Enumerable</span>
   <span class="k">def</span> <span class="nf">take_by</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span>
     <span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="k">yield</span> <span class="n">elem</span> <span class="p">}</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span>
   <span class="k">end</span>
 <span class="k">end</span>
 
 <span class="k">class</span> <span class="nc">WordDictionary</span>
   <span class="kp">include</span> <span class="no">Enumerable</span>
 
   <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
     <span class="n">input</span> <span class="o">=</span> <span class="n">input_to_string</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
     <span class="vi">@words</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[a-z]+/</span><span class="p">)</span>
     <span class="vi">@freq_dic</span> <span class="o">=</span> <span class="vi">@words</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">dic</span><span class="p">,</span> <span class="n">word</span><span class="o">|</span> <span class="n">dic</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">dic</span> <span class="p">}</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">each</span>
     <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="k">yield</span> <span class="n">elem</span> <span class="p">}</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">top_by_frequency</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
     <span class="n">take_by_value</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span> <span class="p">},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">bottom_by_frequency</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
     <span class="n">take_by_value</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="p">},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">top_by_length</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
     <span class="n">list</span> <span class="o">=</span> <span class="n">take_by_key</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="o">-</span><span class="n">key</span><span class="o">.</span><span class="n">length</span> <span class="p">},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
     <span class="n">list</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="o">|</span> <span class="o">[</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="p">,</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span><span class="o">]</span> <span class="p">}</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">to_s</span>
     <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">to_s</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">regexp</span><span class="p">)</span>
     <span class="n">text</span> <span class="o">=</span> <span class="vi">@words</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">=~</span> <span class="n">regexp</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
     <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
   <span class="k">end</span>
 
   <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">input_to_string</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
   <span class="k">case</span> <span class="n">input</span>
   <span class="k">when</span> <span class="sr">/^http/</span>
     <span class="k">begin</span>
       <span class="nb">open</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
     <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
       <span class="nb">puts</span> <span class="n">e</span>
       <span class="nb">exit</span>
     <span class="k">end</span>
   <span class="k">when</span> <span class="nb">String</span>
     <span class="k">begin</span>
       <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="s2">&quot;r:utf-8&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
     <span class="k">rescue</span>
       <span class="nb">puts</span> <span class="s2">&quot;Argument has assumed as a text string.&quot;</span> 
       <span class="n">input</span>
     <span class="k">end</span>
   <span class="k">when</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">class</span>
     <span class="n">input</span><span class="o">.</span><span class="n">read</span>
   <span class="k">else</span>
     <span class="k">raise</span> <span class="s2">&quot;Wrong argument. ARGF, file or string are acceptable.&quot;</span>
   <span class="k">end</span>
  <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">take_by_value</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
     <span class="n">val</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="p">}</span>
     <span class="n">take_by_key_or_val</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">take_by_key</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
     <span class="n">key</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="p">}</span>
     <span class="n">take_by_key_or_val</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
   <span class="k">end</span>
 
   <span class="k">def</span> <span class="nf">take_by_key_or_val</span><span class="p">(</span><span class="n">nth</span><span class="p">,</span> <span class="n">sort_opt</span><span class="p">,</span> <span class="n">by</span><span class="p">)</span>
     <span class="vi">@freq_dic</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="p">:</span> <span class="n">val</span> <span class="p">}</span><span class="o">.</span><span class="n">take_by</span><span class="p">(</span><span class="n">nth</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">sort_opt</span><span class="o">[</span><span class="n">by</span><span class="o">[</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">]]</span> <span class="p">}</span>
   <span class="k">end</span>
 <span class="k">end</span>
 <span class="n">wdic</span> <span class="o">=</span> <span class="no">WordDictionary</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGF</span><span class="p">)</span>
 <span class="nb">p</span> <span class="n">wdic</span><span class="o">.</span><span class="n">top_by_frequency</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div>


<p>確かにスクリプトは肥大化しています。果たして今までの労力は無駄だったんでしょうか。ワードエコでなくなった分、よくなったことがあるんでしょうか。</p>

<p>はい、あります。それは単語辞書が、単なる制御構造からオブジェクトになったことです。</p>

<p>オブジェクトになった利点の１つは、コードがポータブルになるということです。つまりそれが持つデータを維持しながら、他のオブジェクトに送って相互作用させたり、データベースに保存したりできます。同時に内容の異なる複数の辞書オブジェクトを生成し、これらを相互に連携して結果を得る(内容の比較とか)といったこともできるようになります。これらはネットワーク越しであってもかまいません。</p>

<p>他の利点は機能の追加が容易になる点です。クラスにメソッドを追加することで、単語辞書を対象にした新たな機能が容易に追加できます。既にいくつかの機能追加を見てきました。</p>

<p>最初のヴァージョンのスクリプトに機能を追加することを想像頂ければ、この利点は明らかでしょう。このようにオブジェクトは機能追加のフレームワークになっているのです。</p>

<p>今までの苦労も、未来に対する投資というかたちで報われそうです。そろそろ幕を閉じるときが来たようです。</p>
  </body>
</html>
