<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2 id="ruby_block">Rubyのブロックは仮装オブジェクトです</h2>


<p>次にRubyのブロックを説明します。</p>

<p>手続き型言語同様、Rubyもifやwhileなどの制御構造をサポートしており、メソッド定義式の中でこれらを使うことができます（メソッド定義の外でも使えます）。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
   <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">10</span>
     <span class="nb">name</span><span class="o">.</span><span class="n">squeeze!</span>
   <span class="k">else</span>
     <span class="nb">name</span> <span class="o">+=</span> <span class="nb">name</span><span class="o">.</span><span class="n">reverse</span>
   <span class="k">end</span>
   <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">.&quot;</span>
 <span class="k">end</span>
 
 <span class="n">hello</span><span class="p">(</span><span class="s1">&#39;mississippi-hippopotamus&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Hello, misisipi-hipopotamus.&quot;</span>
 <span class="n">hello</span><span class="p">(</span><span class="s1">&#39;donkey&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Hello, donkeyyeknod.&quot;</span>
</code></pre></div>


<p>case式というユニークな制御構造もあります。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">def</span> <span class="nf">good_bye</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
   <span class="n">new_name</span> <span class="o">=</span>
     <span class="k">case</span> <span class="nb">name</span><span class="o">.</span><span class="n">length</span>
     <span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span>
       <span class="nb">name</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">capitalize</span>
     <span class="k">when</span> <span class="mi">9</span><span class="o">.</span><span class="n">.</span><span class="mi">15</span>
       <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">chop</span>
     <span class="k">else</span>
       <span class="nb">name</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&quot;too-long-name&quot;</span><span class="p">)</span>
     <span class="k">end</span>
   <span class="s2">&quot;Good-bye, </span><span class="si">#{</span><span class="n">new_name</span><span class="si">}</span><span class="s2">!!&quot;</span>
 <span class="k">end</span>
 
 <span class="n">good_bye</span><span class="p">(</span><span class="s1">&#39;donkey&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Good-bye, Donkez!!&quot;</span>
 <span class="n">good_bye</span><span class="p">(</span><span class="s1">&#39;alligator&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Good-bye, ALLIGATO!!&quot;</span>
 <span class="n">good_bye</span><span class="p">(</span><span class="s1">&#39;mississppi-hippopotamus&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Good-bye, too-long-name!!&quot;</span>
</code></pre></div>


<p>コードをよく見て頂ければわかると思いますが、caseはcase式であり値を返します。Rubyでは多くの制御構造や構文が式であり値を返します。つまりRubyでは制御構造もオブジェクト的なのです。</p>

<p>しかし、これらの制御構造は真のオブジェクトではありません。したがってこのような制御構造をメソッドの引数として渡すことはできません。LispやSchemeなどの異次元言語では、これらの制御構造を何の苦もなく関数の引数として渡せるそうです。このような関数は高階関数などとブルジョワジーに呼ばれます。</p>

<p>しかしハンカチを噛む必要はありません。Rubyにはブロックがあります。制御構造をdo endまたは{ }のブロックに入れると、メソッドに引数のように渡せるようになります。</p>

<div class="highlight"><pre><code class="ruby"> <span class="o">[</span><span class="s1">&#39;donkey&#39;</span><span class="p">,</span> <span class="s1">&#39;alligator&#39;</span><span class="p">,</span> <span class="s1">&#39;hippopotamus&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
   <span class="n">salute</span> <span class="o">=</span>
     <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;hip&#39;</span><span class="p">)</span>
       <span class="s1">&#39;ばか！&#39;</span>
     <span class="k">else</span>
       <span class="s1">&#39;やあ！&#39;</span>
     <span class="k">end</span>
   <span class="nb">puts</span> <span class="n">salute</span> <span class="o">+</span> <span class="nb">name</span>
 <span class="k">end</span>
 <span class="c1"># &gt;&gt; やあ！donkey</span>
 <span class="c1"># &gt;&gt; やあ！alligator</span>
 <span class="c1"># &gt;&gt; ばか！hippopotamus</span>
</code></pre></div>


<p>例では配列オブジェクトにeachメソッドを送る際にブロックを渡しています。これを受け取った配列オブジェクトは、各要素をブロック引数nameに順番に渡して、ブロックの制御構造を起動するのです。eachに渡すブロックの中身を変えれば、eachメソッドの働きは大幅に変更できます。</p>

<p>この項の表題における「仮装」はtypoではありません。そう制御構造はブロックでオブジェクトに仮装して、他のオブジェクトに入り込むのです！</p>

<p>制御構造をメソッドに付けてオブジェクトに渡せるようにする方法はまだあります。勘のいい人は気が付いたかもしれません。そう制御構造をオブジェクト化すればいいのです。手続きオブジェクト、メソッドオブジェクトなどがこれを可能にします。先を急がれるでしょうからこの話題はこれで終わりにします。</p>

<p>興味のある方は以下が参考になるかもしれません。
<a href="http://melborne.github.io/2008/08/09/Ruby-Mix-in/">Rubyのブロックはメソッドに対するメソッドのMix-inだ！</a></p>
  </body>
</html>
