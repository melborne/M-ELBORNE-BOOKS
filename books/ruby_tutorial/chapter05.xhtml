<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2 id="ruby_class">クラスはオブジェクトの母であってクラスの子であるオブジェクトです</h2>


<p>こういう表現は「クレタ人は嘘つきである」と言った、クレタ人のセリフに聞こえるでしょう。でもわたしはクレタ人ではありません。Rubyワールドにおいてこの表題は事実なのです。</p>

<p>先に「オブジェクトは内部に多数のメソッドを持っており」と書きましたが、実際には持っていません。Rubyはクラスベースのオブジェクト指向言語であり、実際にメソッドを持っているのはオブジェクトの雛型となっているクラスです。オブジェクトはメッセージを受けると、密かに自分の属するクラスにアクセスして結果を得ているのです。</p>

<p>例えば 'donkey'.length というコードでは、文字列オブジェクト'donkey'は自分ではlengthメソッドを持っておらず、その属するStringクラスに問い合わせをして結果を得ます。基本的にすべてのメソッドはクラスが持っており、オブジェクトは自分の属性情報(自身のIDとか属するクラス名とか)しか持っていません。</p>

<p>つまりオブジェクトは「知らないことは俺に聞け！」と言って、陰でググってるわたしやあなたと大差ないのです！</p>

<p>Rubyには40以上の標準添付のクラスがあり、それぞれがその特性を示すような多数のメソッドを備えています。自分で新しいクラスを作ることも、他の人が作ったクラスを取り込むこともできます（kernelモジュールのrequireメソッドを使います）。オブジェクトはほぼ例外なく、これらの何れかのクラスから生成されます。</p>

<p>クラスとメソッドを一望できるページを作りましたので、どんなクラスがあってどんなメソッドを持っているかここで確かめてください。</p>

<p><a href="http://rbref.heroku.com/">Ruby 1.9.3 Methods List</a></p>

<p>各メソッドはRubyリファレンスマニュアルにおけるメソッド解説にリンクしていますから、リンクを辿れば詳細を知ることができます。</p>

<p>一般にクラスはオブジェクトの雛型であると言われます。わたしもさっきそう言いました。でも雛型というと設計図をイメージします。そしてその設計図に基づいて、建造物という実体が作られるとイメージします。</p>

<p>しかしそのイメージはRubyのクラスに関しては正しくありません。なぜならRubyにおいてクラスは実体だからです。つまりクラスもメモリ空間の一部を占有するオブジェクトなのです。ですからクラス自身もメッセージを受信します。</p>

<div class="highlight"><pre><code class="ruby"> <span class="no">Hash</span><span class="o">.</span><span class="n">ancestors</span> <span class="c1"># =&gt; [Hash, Enumerable, Object, Kernel, BasicObject]</span>
</code></pre></div>


<p>クラスはメッセージを受けると自身の中に対応するメソッドを探し、あればそれを起動し結果を返します。このクラスに直接送られるメソッドを特にクラスメソッドと呼ぶことがあります。</p>

<p>前でオブジェクトはメッセージを受けると、属するクラスにメソッドを問い合わせると書きました。ではそのクラスが、対応するメソッドを持っていないときはどうなるでしょう。その答えが上のancestorsです。</p>

<p>ここで出力されたクラス群はHashクラスと血の繋がりはありませんが、武芸の師匠といった位置づけのクラスです（正確にはEnumerableとKernelはモジュールという特殊なクラスです）。だからancestorsというよりteachersといったほうがぴったりきます。つまりクラスが対応するメソッドを持たない場合、そのancestorsに順次問い合わせて答えを得ます。このような仕組みを技芸の継承・文化の継承に倣って、クラスの継承といいます。</p>

<p>すべてのクラスが答えることができるクラスメソッドはnewです。これはその属するオブジェクトを生み出すものです。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">charlie</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Charlie&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="ss">:male</span><span class="p">)</span>
</code></pre></div>


<p>Personクラスに名前、年齢、性別の属性情報を渡して、newメソッドを呼んでいます。</p>

<p>これでメモリ空間に１つの人オブジェクトが生まれます。このときnewメソッドを受けるクラスが既にオブジェクトとして、メモリ空間に生成されているということを忘れないでください。</p>

<p>誰がオブジェクトの母親かはclassメソッドで知ることができます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">carlie</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Person</span>
 <span class="s1">&#39;alligator&#39;</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; String</span>
 <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">class</span> <span class="c1"># =&gt; Array</span>
</code></pre></div>


<p>ではオブジェクトを生み出すクラスは誰が生み出すのでしょう。答えは上と同様クラスにclassメソッドを送れば得られます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="nb">String</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Class</span>
 <span class="nb">Array</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Class</span>
 <span class="no">Person</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Class</span>
</code></pre></div>


<p>RubyにおけるアダムとイブはClassという名を持ったクラスでした。次なる疑問は「ではClassクラスはいったい誰が生むのか？」です。これはご自身で試してみてください。驚愕の事実が得られます。</p>

<p>以上でクラスについてのこの項の説明は終わりです。わたしはクレタ人にならずに済んだでしょうか。</p>

<p>クラスに関して更に知りたい方は以下を参考にしてみてください。</p>

<p><a href="http://melborne.github.io/2008/08/16/Ruby/">Rubyのクラスはオブジェクトの母、モジュールはベビーシッター</a></p>
  </body>
</html>
