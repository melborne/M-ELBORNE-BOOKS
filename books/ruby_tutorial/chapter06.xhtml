<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2 id="user_friendly">Rubyはユーザフレンドリです</h2>


<p>Rubyにおいてオブジェクト指向はその基本的設計思想です。Ruby設計者まつもとゆきひろさん(愛称Matz)はその思想を頑なに守りながら、一方でプログラマーの負担を最小化するために、ユーザインタフェースをよりフレンドリなものにしました。そのいくつかを紹介します。</p>

<h3>メソッド呼び出しのシンタックスシュガー</h3>

<p>オブジェクト指向の基本ルールに従えば、簡単な算術演算も整数オブジェクトに対するメソッド呼び出しのかたちを取ります。</p>

<div class="highlight"><pre><code class="ruby"> <span class="mi">6</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 8</span>
 <span class="mi">6</span><span class="o">.</span><span class="n">-</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 4</span>
 <span class="mi">6</span><span class="o">.</span><span class="n">*</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 12</span>
 <span class="mi">6</span><span class="o">.</span><span class="n">/</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</code></pre></div>


<p>しかしRubyでは慣れ親しんだ数学式の書き方ができます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="mi">6</span> <span class="o">+</span> <span class="mi">2</span> <span class="c1"># =&gt; 8</span>
 <span class="mi">6</span> <span class="o">-</span> <span class="mi">2</span> <span class="c1"># =&gt; 4</span>
 <span class="mi">6</span> <span class="o">*</span> <span class="mi">2</span> <span class="c1"># =&gt; 12</span>
 <span class="mi">6</span> <span class="o">/</span> <span class="mi">2</span> <span class="c1"># =&gt; 3</span>
</code></pre></div>


<p>オブジェクトの状態変数（Rubyではインスタンス変数と呼びます）への代入も次のように自然に書けます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">charlie</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Charlie&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="ss">:male</span><span class="p">)</span>
 <span class="n">charlie</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</code></pre></div>


<p>この実際の定義は以下のようになっています。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">sex</span><span class="p">)</span>
    <span class="vi">@name</span><span class="p">,</span> <span class="vi">@age</span><span class="p">,</span> <span class="vi">@sex</span> <span class="o">=</span> <span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">sex</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">age</span>
    <span class="vi">@age</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">age</span><span class="o">=</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">charlie</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Charlie&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="ss">:male</span><span class="p">)</span>
<span class="n">charlie</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
<span class="n">charlie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 18</span>
</code></pre></div>


<p>つまり変数への代入に見える先の式は、実際は引数を伴ったメソッド呼び出しで、<strong>charlie.age=(18)</strong>と等価です。</p>

<p>このようなメソッド呼び出しのシンタックスシュガー(簡略表記)がRubyではできます。</p>

<h3>クラス定義およびレシーバの省略</h3>

<p>Rubyではクラス定義をすることなく、コードを手続き型言語のように書くこともできます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">def</span> <span class="nf">fact</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
   <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
     <span class="mi">1</span>
   <span class="k">else</span>
     <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
   <span class="k">end</span>
 <span class="k">end</span>
 <span class="nb">puts</span> <span class="n">fact</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="c1"># &gt;&gt; 3628800</span>
</code></pre></div>


<p>このようにいきなりメソッドfactを定義したり、レシーバを指定せずにputsメソッド呼んだりできます。</p>

<p>でもここでもオブジェクト指向設計は崩れていません。Matzはオブジェクト内でのメソッド呼び出しをそのレシーバを省略できるようにすると共に、クラスの外で書かれたコードがObjectクラスという基本クラスに自動設定されるようにし、これによって設計の一貫性を維持しつつ、手続き型記述を許せるようにしたのです。</p>

<p>Rubyの手続き型記述をよく使う方も、このことは頭の片隅にあって良いと思います。Rubyではクラスの外をトップレベルと呼ぶことがあります。</p>

<h3>変数・定数</h3>

<p>以下の構文は変数carに対する値の代入ですが、Rubyではそれは正確な表現ではありません。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">car</span> <span class="o">=</span> <span class="s1">&#39;mini cooper&#39;</span>
</code></pre></div>


<p>「変数carで'mini cooper'文字列オブジェクトを参照できるようにする」と言ったほうがより正確です。つまり変数carは単なる参照ラベルに過ぎません。ですから、１つのオブジェクトに複数の変数を付けてもコピーは起きません。型といった概念もないので型宣言は不要です。Rubyでは次のコードは問題ありません。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
 <span class="n">b</span> <span class="o">=</span> <span class="mi">6</span>
 <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
 <span class="nb">puts</span> <span class="n">c</span>
 <span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;mississippi&#39;</span>
 <span class="n">b</span> <span class="o">=</span> <span class="s1">&#39;-hippopotamus&#39;</span>
 <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
 <span class="nb">puts</span> <span class="n">c</span>
 <span class="c1"># &gt;&gt; 9</span>
 <span class="c1"># &gt;&gt; mississippi-hippopotamus</span>
</code></pre></div>


<p>’+’が算術演算子ではなくてメソッドであると前に書きました。前者のa + bは3整数オブジェクトに対して、6整数オブジェクトを引数に+メソッドを呼び出しています。その後a, bの参照先が変わって、後者のa + bは'mississippi'文字列オブジェクトに対して、'-hippopotamus'文字列オブジェクトを引数に +メソッドを呼び出しています。つまり+メソッドは、異なるタイプのオブジェクトに送られているのです。</p>

<p>そして整数オブジェクトでは+メソッドは、自身と引数を加算した整数オブジェクトを返すように、文字列オブジェクトでは、自身と引数を連結した文字列オブジェクトを返すようにそれぞれ定義されています。</p>

<p>定数に対する考え方も同じです。定数は大文字で始まり貼り替えの必要のない、つまり内容が変化しないオブジェクトを指す目的で使います。なおクラス定義は大文字で始まりますが(String, Array)、これらはクラスオブジェクトを指し示す定数です。</p>

<h3>括弧の省略</h3>

<p>Rubyでは解釈に曖昧さが生じない限り、括弧を省略できます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">def</span> <span class="nf">say</span> <span class="n">word</span>
   <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">*</span> <span class="mi">3</span>
 <span class="k">end</span>
 <span class="nb">puts</span> <span class="n">say</span> <span class="s2">&quot;Hello!&quot;</span>
 <span class="nb">puts</span> <span class="n">say</span> <span class="n">say</span> <span class="s2">&quot;Hi!&quot;</span>
 <span class="c1"># &gt;&gt; Hello!　Hello!　Hello!　</span>
 <span class="c1"># &gt;&gt; Hi!　Hi!　Hi!　　Hi!　Hi!　Hi!　　Hi!　Hi!　Hi!　　</span>
</code></pre></div>


<p>このオブジェクト原理主義的な書き方はこうです。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
   <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2"> &quot;</span><span class="o">.</span><span class="n">*</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
 <span class="k">end</span>
 <span class="nb">puts</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="s2">&quot;Hello!&quot;</span><span class="p">))</span>
 <span class="nb">puts</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="n">say</span><span class="p">(</span><span class="s2">&quot;Hi!&quot;</span><span class="p">)))</span>
 <span class="c1"># &gt;&gt; Hello!　Hello!　Hello!　</span>
 <span class="c1"># &gt;&gt; Hi!　Hi!　Hi!　　Hi!　Hi!　Hi!　　Hi!　Hi!　Hi!　　</span>
</code></pre></div>


<p>括弧の省略はこのようにコードの見た目を改善し読みやすくします。しかし行き過ぎはむしろコードを読み難くします。文章の句読点を使うように適度に括弧を使うのが常識人です。</p>

<h3>多重代入と*(アスタリスク)</h3>

<p>Rubyでは関連する複数の変数に対して同時に代入ができます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</code></pre></div>


<p>これを多重代入といいます。もちろん関連がなくてもできますが推奨されません。</p>

<div class="highlight"><pre><code class="ruby"> <span class="no">SIZE</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">switch</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:L</span> <span class="o">=&gt;</span> <span class="s1">&#39;large&#39;</span><span class="p">,</span> <span class="ss">:M</span> <span class="o">=&gt;</span> <span class="s1">&#39;medium&#39;</span><span class="p">,</span> <span class="ss">:S</span> <span class="o">=&gt;</span> <span class="s1">&#39;small&#39;</span> <span class="p">},</span> <span class="s1">&#39;Ruby&#39;</span><span class="p">,</span>  <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</code></pre></div>


<p>メソッドは複数の返り値を返せるので、これを多重代入で受けることもできます。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">class</span> <span class="nc">Fixnum</span>
   <span class="k">def</span> <span class="nf">plus_multi</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
     <span class="k">return</span> <span class="nb">self</span> <span class="o">+</span> <span class="n">other</span><span class="p">,</span> <span class="nb">self</span> <span class="o">*</span> <span class="n">other</span>
   <span class="k">end</span>
 <span class="k">end</span>
 
 <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="n">plus_multi</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
 <span class="n">a</span> <span class="c1"># =&gt; 7</span>
 <span class="n">b</span> <span class="c1"># =&gt; 12</span>
</code></pre></div>


<p>変数に*(アスタリスク)を付けるとマルチラベルになって、受けたオブジェクトを配列に入れてそれを指します。</p>

<div class="highlight"><pre><code class="ruby"> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
 <span class="n">a</span> <span class="c1"># =&gt; [1, 2, 3]</span>
</code></pre></div>


<p>Rubyではこれをメソッドの引数にも使えるのです。</p>

<div class="highlight"><pre><code class="ruby"> <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
   <span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="p">}</span>
 <span class="k">end</span>
 
 <span class="n">hello</span> <span class="s1">&#39;donkey&#39;</span><span class="p">,</span> <span class="s1">&#39;alligator&#39;</span><span class="p">,</span> <span class="s1">&#39;hippopotamus&#39;</span>
 <span class="c1"># &gt;&gt; Hello, donkey!</span>
 <span class="c1"># &gt;&gt; Hello, alligator!</span>
 <span class="c1"># &gt;&gt; Hello, hippopotamus!</span>
</code></pre></div>


<p>このようにRubyは純粋なオブジェクト指向言語でありながら、とてもユーザフレンドリな作りになっています。</p>

<p>呆れるほど長い前置きが続きました。でもこれで最初に掲げた4つの項目の説明は終わりです。もちろん説明はし尽くされていませんが、最初の目的を失しそうなのでここまでとします。</p>

<p>そろそろ本題に入りましょう。</p>
  </body>
</html>
