<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h2>１６章　JavaScript脳で理解するRubyのオブジェクト指向</h2>

<p>本章は、前章までの記事をベースにしたRubyのオブジェクト指向についての「<strong>パロディ</strong>」です。その点ご理解の上、お読みください。しかし記載コードは正しく実行可能であり、本章を通して、Rubyのオブジェクト指向の別の一面を垣間見ることができるかもしれません。</p>

<h2>はじめに</h2>

<p>「世の中がRubyで埋まればいいのに」と思うあなたの気持ちとは裏腹に、世界は一層多様で複雑なものに向かっています。エントロピーは日々増大しています。</p>

<p>人々は、その非効率性を指して<strong>「多様性は悪である」</strong>といいます。しかし画一的世界は創作の原動力となる人々のモチベーションを低下させ、そのやる気を奪います。つまり複雑で理解できない混沌として多様な世界こそが、人々に前に進むエネルギーを注入するのです。</p>

<p>僕たちはハリウッド映画を見るとき、韓国ドラマを見るとき、それから日本人が演じるドラマを見るときに、その文化や歴史的背景に基づく演出の僅かな違いに目ざとく気付きます。そしてその違いによって脳は刺激を受け活動を開始するのです。何一つ同じものなどありません。</p>

<p>僕の脳は完全にJavaScript脳です。他言語の知識は無いと言っていいです。その結果、プログラム言語の世界が極めて画一的に見えています。これは極めて不健全で、何も生み出せない危険な状態です。あまり時間はありませんが、何とかして僕はこの多様な世界を受容する力を手に入れなければなりません。世界平和のためにも。</p>

<p>そんなわけで...</p>

<p>JavaScript脳の僕がRubyのオブジェクト指向を学んだので、その理解をまとめました。当然に不理解に基づく間違いが含まれています。なお、以下のコードの実行結果はruby1.9.3に基づいています。</p>

<h2>オブジェクトの生成</h2>

<p>Rubyはプロトタイプベースのオブジェクト指向言語です。オブジェクトは一または複数のプロパティを持てます。プロパティとは、そのオブジェクトに紐付いたデータ（オブジェクトを含む）で、ラベルで参照できるものです。今、<code>name</code>と<code>age</code>というプロパティを持った２つのオブジェクトCharlie, Earlを生成します。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Charlie</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Charlie&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">12</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Earl</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Earl&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">14</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Charlie&quot;</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 12</span>

<span class="no">Earl</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Earl&quot;</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 14</span>
</code></pre></div>


<p>オブジェクト生成に<code>class</code>式を使っていますが、これはクラスベースのオブジェクト指向をイミテートしたものです。勘違いを生むのでclassを<strong>「良くない部品（The Bad Parts）」</strong>に分類するRubyistもいるようです。各オブジェクトのプロパティに対するアクセスは、上述のようにJavaScriptのプロパティ参照と同じ方法で、<code>.(ピリオド)</code>を使って行うことができます。<code>def</code>式における<code>self</code>はそのオブジェクト自身を指しているので重要です。これを忘れてdefすると誤動作を起こすので、これをThe Bad Partsに分類する人もいます。</p>

<p>なお、生成時のオブジェクト名は大文字からという制約がありますが、気に入らないなら次のようにします。</p>

<div class="highlight"><pre><code class="ruby"><span class="n">charlie</span> <span class="o">=</span> <span class="no">Charlie</span>
<span class="n">earl</span> <span class="o">=</span> <span class="no">Earl</span>

<span class="n">charlie</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Charlie&quot;</span>
<span class="n">charlie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 12</span>

<span class="n">earl</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Earl&quot;</span>
<span class="n">earl</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 14</span>
</code></pre></div>


<p>また、オブジェクトに対するプロパティの追加や変更は、変数に値を代入するが如くに極めて簡単に行えます。各オブジェクトに、生まれた日からの日数を計算する<code>age_in_days</code>プロパティを追加してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Charlie</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="p">}</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Charlie</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="p">}</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span>
</code></pre></div>


<p>JavaScript同様Rubyにおいて関数（定義）はオブジェクトであり、このようにプロパティにセットできます。プロパティ名を介して参照される関数は、<code>[]</code>(角括弧)を付することで実行されます。従って<code>[]</code>は必須です。以下ではプロパティにセットされた関数を<code>メソッド</code>と呼ぶことがあります。さて、メソッドを実際に呼んでみましょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; undefined method `age_in_days=&#39; for Charlie:Class (NoMethodError) </span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; undefined method `age_in_days=&#39; for Earl:Class (NoMethodError)</span>
</code></pre></div>


<p>エラーが出ました。どうやら1.9系にはバグがあるようです。次のパッチを当てて、もう一度試してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="o">[</span><span class="no">Charlie</span><span class="p">,</span> <span class="no">Earl</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">klass</span><span class="o">|</span>
  <span class="k">def</span> <span class="nc">klass</span><span class="o">.</span><span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
    <span class="k">case</span> <span class="nb">name</span>
    <span class="k">when</span> <span class="sr">/^(.+)=$/</span>
      <span class="p">(</span><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span><span class="p">;</span> <span class="nb">self</span> <span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:attr_accessor</span><span class="p">,</span> <span class="vg">$1</span><span class="p">)</span>
      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Charlie</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="p">}</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Earl</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="p">}</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 4380</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 5110</span>
</code></pre></div>


<p>いいですね！</p>

<p>未定義のプロパティの参照に対しては<code>undefined</code>が返されます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">job</span> <span class="c1"># =&gt; `method_missing&#39;: undefined method `job&#39; for Charlie:Class (NoMethodError)</span>
</code></pre></div>


<h2>プロパティ探索</h2>

<p>しかし一方で、未定義ながら特定のプロパティに対しては所定の値が返されます。<code>class</code>プロパティを呼んでみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Class</span>
</code></pre></div>


<p>CharlieオブジェクトのコンストラクタはClassオブジェクトであるという結果が返ってきました。</p>

<p>未定義のプロパティが呼べたという事実をどう解釈すればいいでしょうか。可能性の一つはオブジェクトの生成時にRubyが自動でそのようなプロパティをセットしたということです。</p>

<p>確かめてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:age</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:class</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:methods</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</code></pre></div>


<p><code>methods</code>メソッドに対して、上で定義した<code>age</code>はtrueを返しましたが、<code>class</code>およびこの呼び出しメソッド自体もfalseを返しました。つまりこれらのプロパティはCharlieオブジェクトには存在しないのです。</p>

<p>つまりCharlieオブジェクトにはそのプロパティ探索に関して、別のオブジェクトがリンクされているのです。この別のオブジェクトは<code>superclass</code>プロパティで参照できます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Object</span>
</code></pre></div>


<p><code>Object</code>オブジェクトがCharlieオブジェクトにリンクしていることが分かりました。このオブジェクトをRubyではプロトタイプオブジェクトといいます。<code>superclass</code>というプロパティ名はミスリーディングですね。では、このオブジェクトが先のプロパティを持っているかを確かめてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Object</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:class</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
<span class="no">Object</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:methods</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</code></pre></div>


<p>残念ながら、持ってませんでした...えーっと...</p>

<p>実はこれらは（Kernelモジュールのインスタンスメソッド）-> （Classクラスのインスタンスメソッド）-> （Objectクラスのクラスメソッド）という流れになるのですが、話が複雑になるのでここでは持っているとしてください。話し合わないし。m(__)m</p>

<p>参考までに。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Kernel</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:class</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
<span class="no">Kernel</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:methods</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
<span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:class</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
<span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:methods</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</code></pre></div>


<p>以上により、オブジェクトのプロパティが呼ばれたとき、そのオブジェクトに対象プロパティがあればそれを返すが、無い場合はsuperclassプロパティにセットされたオブジェクトのプロパティを探索する。そして対象プロパティがそこにあればそれを返すということが分かりました。</p>

<p>ここで仮に、プロトタイプオブジェクトにも対象プロパティが見つからなかった場合はどうなるのでしょうか。これは想像が付きますよね。プロトタイプオブジェクトもCharlieオブジェクトと同種のオブジェクトですから、superclassプロパティを持ってるはずです。よって、ここから更にその先のオブジェクトを辿るのでしょう。Charlieの先の先、つまりそのプロトタイプオブジェクトのsuperclassにセットされたオブジェクトを見てみましょう。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; BasicObject</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; nil</span>
</code></pre></div>


<p><code>BasicObject</code>が返ってきました。更にそのsuperclassを調べると、今度は<code>nil</code>が返ってきました。つまりこの場合、プロパティ探索の旅（プロトタイプチェーン）はここで終了ということですね。</p>

<h2>プロトタイプチェーンを使う</h2>

<p>さて、この辺で最初のコードに戻ります。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Charlie</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Charlie&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">12</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Earl</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Earl&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">14</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">### a patch</span>
<span class="o">[</span><span class="no">Charlie</span><span class="p">,</span> <span class="no">Earl</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">klass</span><span class="o">|</span>
  <span class="k">def</span> <span class="nc">klass</span><span class="o">.</span><span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
    <span class="k">case</span> <span class="nb">name</span>
    <span class="k">when</span> <span class="sr">/^(.+)=$/</span>
      <span class="p">(</span><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span><span class="p">;</span> <span class="nb">self</span> <span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:attr_accessor</span><span class="p">,</span> <span class="vg">$1</span><span class="p">)</span>
      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="c1">### end of a patch</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Charlie</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="p">}</span>

<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Earl</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="p">}</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Charlie&quot;</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 12</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 4380</span>

<span class="no">Earl</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Earl&quot;</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 14</span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 5110</span>
</code></pre></div>


<p>このコードを見て、ムズムズしない人はいないでしょう。そう<code>age_in_days</code>メソッドがDRY原則に反しています。その結果どういった問題が生じるでしょう。</p>

<p>仮に、銀河の歪みによって地球の公転周期が今の３倍、つまり１年が365*3=1095日になったらどうなりますか？その場合、あなたはすべての人オブジェクトのage_in_daysメソッドを１つづつ修正しなければなりません。</p>

<p>先ほどのプロパティ探索の機構を利用してこの問題を解決します。つまり人の原型となる<code>Person</code>オブジェクトを定義してプロトタイプチェーンに組み込むのです。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;unknown&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">1</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age_in_days</span>
    <span class="o">-&gt;</span><span class="p">{</span> <span class="no">Person</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Person</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;unknown&quot;</span>
<span class="no">Person</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 1</span>
<span class="no">Person</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 1095</span>
</code></pre></div>


<p>Personオブジェクトが生成できました。これをCharlie, Earlの各オブジェクトのプロトタイプとなるよう、それらのsuperclassにセットして、age_in_daysを呼んでみます。<code>class SUBCLASS &lt; SUPERCLASS; end</code>という構文を使います。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Charlie</span> <span class="o">&lt;</span> <span class="no">Person</span><span class="p">;</span> <span class="k">end</span>

<span class="k">class</span> <span class="nc">Earl</span> <span class="o">&lt;</span> <span class="no">Person</span><span class="p">;</span> <span class="k">end</span>

<span class="c1"># ~&gt; superclass mismatch for class Charlie (TypeError)</span>
<span class="c1"># ~&gt; superclass mismatch for class Earl (TypeError)</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; </span>
<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; </span>
</code></pre></div>


<p>superclassがミスマッチであるとのエラーが出ました。どうやらまだバグがあるようです。</p>

<p>時間の関係上、誰かからパッチが出るのを期待しつつ^ ^;、ここではCharlie, Earlオブジェクトを再定義することで話を進めます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;unknown&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">1</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age_in_days</span>
    <span class="o">-&gt;</span><span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Charlie</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Charlie&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">12</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Earl</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Earl&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">14</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Charlie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 13140</span>

<span class="no">Earl</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 15330</span>
</code></pre></div>


<p>プロトタイプチェーンがどう変化したか確認してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Person</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Object</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; BasicObject</span>
<span class="no">Charlie</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; nil</span>
</code></pre></div>


<p>見事にpersonオブジェクトが間に差し込まれています。</p>

<h2>オブジェクトコンストラクタ</h2>

<p>さて、引き続きPersonを型とする別のオブジェクトを生成してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;unknown&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">1</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age_in_days</span>
    <span class="o">-&gt;</span><span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Zena</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Zena&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Rio</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Rio&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">18</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Jackie</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name</span>
    <span class="s1">&#39;Jackie&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age</span>
    <span class="mi">21</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Zena</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Zena&quot;</span>
<span class="no">Zena</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 1</span>
<span class="no">Zena</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 1095</span>

<span class="no">Rio</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Rio&quot;</span>
<span class="no">Rio</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 18</span>
<span class="no">Rio</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 19710</span>

<span class="no">Jackie</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Jackie&quot;</span>
<span class="no">Jackie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 21</span>
<span class="no">Jackie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 22995</span>
</code></pre></div>


<p>クラスベースのオブジェクト指向に慣れた人にとって、このオブジェクト生成プロセスは面倒に感じられることでしょう。もっと簡便にオブジェクトを生成する方法はないでしょうか。</p>

<p>Rubyの関数が使えそうです。そう関数でオブジェクトのコンストラクタを作るのです。nameとageを引数にとって、これらをプロパティとしたオブジェクトを返す、そんな関数です。コンストラクタらしく、大文字から始まるPersonコンストラクタを定義します。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">Person</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
  <span class="k">unless</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_defined?</span><span class="p">(</span><span class="ss">:Person</span><span class="p">)</span>
    <span class="n">proto</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">age_in_days</span>
        <span class="o">-&gt;</span><span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="no">Object</span><span class="o">.</span><span class="n">const_set</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="n">proto</span><span class="p">)</span>
  <span class="k">end</span>
  
  <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Person</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
    <span class="p">(</span><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span><span class="p">;</span> <span class="nb">self</span> <span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
      <span class="n">define_method</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">{</span> <span class="nb">name</span> <span class="p">}</span>
      <span class="n">define_method</span><span class="p">(</span><span class="ss">:age</span><span class="p">)</span> <span class="p">{</span> <span class="n">age</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<p>ここでの重要なポイントは、age_in_daysプロパティを持ったプロトタイプオブジェクト（Person）を生成し、返されるオブジェクトのsuperclassにこれをセットすることです。一応、Personが存在する場合はunless式で無駄な処理が繰り返されないようにします。これで先のコードとほぼ同様のオブジェクトをコンストラクタを使って生成できそうです。</p>

<p>やってみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Zena</span> <span class="o">=</span> <span class="no">Person</span><span class="p">(</span><span class="s1">&#39;Zena&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; Zena</span>
<span class="no">Rio</span> <span class="o">=</span> <span class="no">Person</span><span class="p">(</span><span class="s1">&#39;Rio&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="c1"># =&gt; Rio</span>
<span class="no">Jackie</span> <span class="o">=</span> <span class="no">Person</span><span class="p">(</span><span class="s1">&#39;Jackie&#39;</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span> <span class="c1"># =&gt; Jackie</span>

<span class="no">Zena</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Zena&quot;</span>
<span class="no">Zena</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 1</span>
<span class="no">Zena</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 1095</span>
<span class="no">Zena</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Person</span>

<span class="no">Rio</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Rio&quot;</span>
<span class="no">Rio</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 18</span>
<span class="no">Rio</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 19710</span>
<span class="no">Rio</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Person</span>

<span class="no">Jackie</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Jackie&quot;</span>
<span class="no">Jackie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 21</span>
<span class="no">Jackie</span><span class="o">.</span><span class="n">age_in_days</span><span class="o">[]</span> <span class="c1"># =&gt; 22995</span>
<span class="no">Jackie</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Person</span>
</code></pre></div>


<p>いいですね！</p>

<h2>Person.new</h2>

<p>ここまで来れば僕が何を言いたいのかが分かると思います。</p>

<p>えっ？何ですか？</p>

<p>a Rubyist: 「Rubyってクラスベースのオブジェクト指向なんだけど」</p>

<p>...</p>

<p>まさか！</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span><span class="p">,</span> <span class="vi">@age</span> <span class="o">=</span> <span class="nb">name</span><span class="p">,</span> <span class="n">age</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">age_in_days</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">365</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Person</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Object</span>

<span class="n">zena</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Zena&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; #&lt;Person:0x00000101043600 @name=&quot;Zena&quot;, @age=1&gt;</span>
<span class="n">rio</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Rio&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="c1"># =&gt; #&lt;Person:0x00000101043150 @name=&quot;Rio&quot;, @age=18&gt;</span>
<span class="n">jackie</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jackie&#39;</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span> <span class="c1"># =&gt; #&lt;Person:0x00000101042d40 @name=&quot;Jackie&quot;, @age=21&gt;</span>

<span class="n">zena</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Zena&quot;</span>
<span class="n">zena</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 1</span>
<span class="n">zena</span><span class="o">.</span><span class="n">age_in_days</span> <span class="c1"># =&gt; 365</span>
<span class="n">zena</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Person</span>

<span class="n">rio</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Rio&quot;</span>
<span class="n">rio</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 18</span>
<span class="n">rio</span><span class="o">.</span><span class="n">age_in_days</span> <span class="c1"># =&gt; 6570</span>
<span class="n">rio</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Person</span>

<span class="n">jackie</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Jackie&quot;</span>
<span class="n">jackie</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 21</span>
<span class="n">jackie</span><span class="o">.</span><span class="n">age_in_days</span> <span class="c1"># =&gt; 7665</span>
<span class="n">jackie</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Person</span>
</code></pre></div>



  </body>
</html>
