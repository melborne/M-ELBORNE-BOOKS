<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title>エラーメッセージから学ぶRack</title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h1>１章　Rack最初の一歩</h1>

<p>Rackとはなんでしょう。<a href="http://rack.github.com/" title="Rack">Rack</a>のサイトには、Rackについて次のように書いてあります。</p>

<blockquote><p>Rack provides a minimal interface between webservers supporting Ruby and Ruby frameworks.</p>

<p>Rackは、Ruby向けWebサーバとRuby製フレームワークとの間の最小のインタフェースを提供します。</p></blockquote>

<p>よくわかりませんが、たぶんそれは、Ruby製Webフレームワークを作る人にとっては<strong>仮想Webサーバ</strong>であり、またRuby向けWebサーバを作る人にとっては<strong>仮想Webフレームワーク</strong>になるものだと一応理解します。</p>

<h2 id="askrack">Rackupに聞いてみる</h2>


<p>古くからの格言の一つに「Rackのことはrackupに聞け」というものがあります。Rackがわからないので、この格言に従いrackupに聞いてみることにします。</p>

<p>昨日はドラクエの発売日だったので（元記事は2012年8月2日に書かれました）、<code>draque</code>というディレクトリを作って、ここで<code>rackup</code>を実行します。因みに私はドラクエは一度もやったことはありません。やっぱりそれは不幸なことですか？</p>

<div class="highlight"><pre><code class="bash">% mkdir draque
% <span class="nb">cd </span>draque
% rackup
configuration config.ru not found
</code></pre></div>


<p>config.ruという設定ファイルがないと言われました。それでは、これを作って再度rackupします。</p>

<div class="highlight"><pre><code class="bash">% touch config.ru
% rackup
~/.rbenv/..../rack/builder.rb:129:in <span class="sb">`</span>to_app<span class="s1">&#39;: missing run or map statement (RuntimeError)</span>
<span class="s1">        from config.ru:1:in `&lt;main&gt;&#39;</span>
</code></pre></div>


<p>今度はrunまたはmapが見つからないと言われたので、config.ruに<code>run</code>と書いてもう一度やってみます。</p>

<div class="highlight"><pre><code class="bash">% <span class="nb">echo </span>run &gt; config.ru 
% rackup              
~/.rbenv/.../rack/builder.rb:99:in <span class="sb">`</span>run<span class="s1">&#39;: wrong number of arguments (0 for 1) (ArgumentError)</span>
<span class="s1">        from config.ru:2:in `block in &lt;main&gt;&#39;</span>
</code></pre></div>


<p>今度は引数が足りないと言われました。<code>run</code>は恐らくWebアプリを走らせるコマンドでしょうから、Webアプリのインスタンスを渡せばよさそうです。試しに<code>1</code>を渡してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>




<div class="highlight"><pre><code class="bash">% rackup      
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre></div>


<p>ポート9292でThin Webサーバが立ち上がりました。</p>

<h2 id="call">callメソッド</h2>


<p>Browserでhttp://localhost:9292 にアクセスしてみます。</p>

<div class="highlight"><pre><code class="bash">NoMethodError: undefined method <span class="sb">`</span>call<span class="err">&#39;</span> <span class="k">for </span>1:Fixnum
</code></pre></div>


<p><code>call</code>メソッドがないと言われました。では、Fixnum#callを定義してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>今度はどうでしょう。</p>

<div class="highlight"><pre><code class="bash">ArgumentError: wrong number of arguments <span class="o">(</span>1 <span class="k">for </span>0<span class="o">)</span>
        config.ru:3:in <span class="sb">`</span>call<span class="err">&#39;</span>
</code></pre></div>


<p>引数がないと言われました。引数を付けてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: Status must be &gt;<span class="o">=</span>100 seen as integer
</code></pre></div>


<p>Statusは100以上の数でなければならないとのRack::Lint::LintErrorが吐かれました。ではcallメソッドが200を返すようにしてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="mi">200</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: headers object should respond to <span class="c">#each, but doesn&#39;t (got NilClass as headers)</span>
</code></pre></div>


<p>headersオブジェクトはNilClassだから<code>#each</code>できないと言われました。では第２返り値として#eachできるオブジェクト<code>[1]</code>を渡してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: header key must be a string, was Fixnum
</code></pre></div>


<p>今度はヘッダーキーが文字列じゃないと言われました。これで#eachできるオブジェクトがHashとわかりました。キーが文字列のHashオブジェクトを返してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: a header value must be a String, but the value of <span class="s1">&#39;one&#39;</span> is a Fixnum
</code></pre></div>


<p>今度は値も文字列じゃないとダメだと言われたので、これに対応してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: No Content-Type header found
</code></pre></div>


<p><code>Content-Type</code>ヘッダーがないと言われました。用意します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<div class="highlight"><pre><code class="bash">!! Unexpected error <span class="k">while </span>processing request: Response body must respond to each
127.0.0.1 - - <span class="o">[</span>02/Aug/2012 20:38:50<span class="o">]</span> <span class="s2">&quot;GET / HTTP/1.1&quot;</span> 200 - 0.0010
</code></pre></div>


<p>"<strong>GET / HTTP/1.1" 200</strong>"が返ってきました。しかし、レスポンスボディが<code>each</code>できないと言っています。</p>

<p>それでは第３返り値として、eachできるbodyを返すようにしてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">},</span> <span class="s2">&quot;Welcome to ONE&quot;</span><span class="o">.</span><span class="n">chars</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">run</span> <span class="mi">1</span>
</code></pre></div>


<p>どうでしょう。</p>

<p><img src="images/draque1.png" alt="draque1" /></p>

<br clear='all' />


<p>Browserにレスポンスが返ってきました。</p>

<h2 id="wrap">ここまでのまとめ</h2>


<p>以上のことをまとめます。</p>

<blockquote><ol>
<li>rackupコマンドはWebサーバを起動する。</li>
<li>その際、config.ruという設定ファイル（Rubyスクリプト）を読み込む。</li>
<li>config.ruでは、Webアプリのインスタンスをrunメソッドに渡す。</li>
<li>Webアプリのインスタンスは、１引数のcallメソッドを持っている必要がある。</li>
<li>callメソッドは、３つの返り値、すなわち（１）100以上の数字からなるステータスコード、（２）少なくとも"Content-Type"をキーに、文字列を値に持つハッシュによるヘッダー、および（３）eachできるボディを返す。</li>
</ol>
</blockquote>

<h2 id="rackweb">Rack Webフレームワーク</h2>


<p>さて、Webアプリが<code>1</code>では発展性が無さそうです。もう少しマシなWebアプリを考えます。</p>

<p><code>call</code>メソッドを持っているオブジェクトと言えば、真っ先に思い浮かぶのはProcオブジェクトです。次に、思い浮かぶのはMethodオブジェクトです。ここでは後者を使ってみます。draqueメソッドを定義し、これをMethodオブジェクト化してrunに渡します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
  <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">},</span> <span class="s2">&quot;Welcome to the World of Draque!!&quot;</span><span class="o">.</span><span class="n">chars</span>
<span class="k">end</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p><code>rackup</code>してBrowserでアクセスします。</p>

<p><img src="images/draque2.png" alt="draque2" /></p>

<br clear='all' />


<p>いいようです。</p>

<p>さて次に、draqueに渡される引数について見てみます。まずは<code>p</code>します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
  <span class="nb">p</span> <span class="n">arg</span>
  <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">},</span> <span class="s2">&quot;Welcome to the World of Draque!!&quot;</span><span class="o">.</span><span class="n">chars</span>
<span class="k">end</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>コンソールに次のような出力が得られました。</p>

<div class="highlight"><pre><code class="bash">% rackup      
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
<span class="o">{</span><span class="s2">&quot;SERVER_SOFTWARE&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;thin 1.3.1 codename Triple Espresso&quot;</span>, <span class="s2">&quot;SERVER_NAME&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;localhost&quot;</span>, <span class="s2">&quot;rack.input&quot;</span><span class="o">=</span>&gt;#&lt;Rack::Lint::InputWrapper:0x00000100a156c0 @input<span class="o">=</span><span class="c">#&lt;StringIO:0x000001009dab38&gt;&gt;, &quot;rack.version&quot;=&gt;[1, 0], &quot;rack.errors&quot;=&gt;#&lt;Rack::Lint::ErrorWrapper:0x00000100a15648 @error=#&lt;IO:&lt;STDERR&gt;&gt;&gt;, &quot;rack.multithread&quot;=&gt;false, &quot;rack.multiprocess&quot;=&gt;false, &quot;rack.run_once&quot;=&gt;false, &quot;REQUEST_METHOD&quot;=&gt;&quot;GET&quot;, &quot;REQUEST_PATH&quot;=&gt;&quot;/&quot;, &quot;PATH_INFO&quot;=&gt;&quot;/&quot;, &quot;REQUEST_URI&quot;=&gt;&quot;/&quot;, &quot;HTTP_VERSION&quot;=&gt;&quot;HTTP/1.1&quot;, &quot;HTTP_HOST&quot;=&gt;&quot;localhost:9292&quot;, &quot;HTTP_CONNECTION&quot;=&gt;&quot;keep-alive&quot;, &quot;HTTP_CACHE_CONTROL&quot;=&gt;&quot;max-age=0&quot;, &quot;HTTP_USER_AGENT&quot;=&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.3 (KHTML, like Gecko) Chrome/22.0.1221.0 Safari/537.3&quot;, &quot;HTTP_ACCEPT&quot;=&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;, &quot;HTTP_ACCEPT_ENCODING&quot;=&gt;&quot;gzip,deflate,sdch&quot;, &quot;HTTP_ACCEPT_LANGUAGE&quot;=&gt;&quot;ja,en-US;q=0.8,en;q=0.6&quot;, &quot;HTTP_ACCEPT_CHARSET&quot;=&gt;&quot;UTF-8,*;q=0.5&quot;, &quot;HTTP_COOKIE&quot;=&gt;&quot;_gauges_unique_year=1; _gauges_unique=1; _blog_app_session=BAh7B0kiD3Nlc3Npb25faWQGOgZFRkkiJTVjMmY2ZDU1ODBiNTUxMDY5NGY3ZDkxNzQ3ZmRkOWVkBjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMTQvY1IyYUpOaFBYUXpFYTNXOEU5SHlpYnVEU0ZEaDRxTmUwTzVINThmbmc9BjsARg%3D%3D--f9184f85f7974529836b4bce7c23a5f7132bf8df&quot;, &quot;GATEWAY_INTERFACE&quot;=&gt;&quot;CGI/1.2&quot;, &quot;SERVER_PORT&quot;=&gt;&quot;9292&quot;, &quot;QUERY_STRING&quot;=&gt;&quot;&quot;, &quot;SERVER_PROTOCOL&quot;=&gt;&quot;HTTP/1.1&quot;, &quot;rack.url_scheme&quot;=&gt;&quot;http&quot;, &quot;SCRIPT_NAME&quot;=&gt;&quot;&quot;, &quot;REMOTE_ADDR&quot;=&gt;&quot;127.0.0.1&quot;, &quot;async.callback&quot;=&gt;#&lt;Method: Thin::Connection#post_process&gt;, &quot;async.close&quot;=&gt;#&lt;EventMachine::DefaultDeferrable:0x00000100a06c38&gt;}127.0.0.1 - - [02/Aug/2012 21:39:21] &quot;GET / HTTP/1.1&quot; 200 - 0.0023</span>
</code></pre></div>


<p>クライアントの環境情報がWebサーバからハッシュで渡されていました。これらの情報があれば、クライアントの環境に応じたレスポンスが構築できそうです。まずは、これらを一覧表示するレスポンスを書いてみます。Content-Typeも<strong>text/html</strong>に変更します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="n">body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="o">[</span><span class="s2">&quot;&lt;h1&gt;Welcome to the World of Draque!!&lt;/h1&gt;&quot;</span><span class="o">]</span> <span class="o">+</span>
  <span class="n">env</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;&lt;p&gt;%s =&gt; %s&lt;/p&gt;&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
<span class="k">end</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<p><img src="images/draque3.png" alt="draque3" /></p>

<br clear='all' />


<p>タイトルとともにクライアントの環境情報がレンダリングされました。</p>

<p>次に環境変数におけるパス情報を使って、パスに応じたレスポンスを返すようにしてみます。</p>

<p>case式でパスに応じてレスポンスを切り替えるようにします。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="n">path</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span>
  <span class="k">case</span> <span class="n">path</span>
  <span class="k">when</span> <span class="s1">&#39;/draque&#39;</span> <span class="k">then</span> <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">draque_body</span> <span class="o">]</span>
  <span class="k">when</span> <span class="s1">&#39;/&#39;</span>       <span class="k">then</span> <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="o">]</span>
  <span class="k">else</span> <span class="o">[</span> <span class="mi">404</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">not_found</span> <span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">headers</span>
  <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="o">[</span><span class="s2">&quot;&lt;h1&gt;Welcome to the World of Draque!!&lt;/h1&gt;&quot;</span><span class="o">]</span> <span class="o">+</span>
  <span class="n">env</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;&lt;p&gt;%s =&gt; %s&lt;/p&gt;&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">draque_body</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;http://farm1.staticflickr.com/1/79151_ed9b9d37a9.jpg&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">not_found</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png?1329921026&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p><code>/draque</code>にアクセスします。</p>

<p><img src="images/draque4.png" alt="draque4" /></p>

<br clear='all' />


<p>出典: <a href="http://www.flickr.com/photos/pete/79151/" title="Tribbles? by Pete Barr-Watson, on Flickr">Tribbles? by Pete Barr-Watson, on Flickr</a></p>

<p>次に、用意されていない<code>/ruby</code>にアクセスします。</p>

<p><img src="images/draque5.png" alt="draque5" /></p>

<br clear='all' />


<p>うまくいっています。</p>

<h2 id="dsl">ルーティングDSL</h2>


<p>さて、ここまで来たら、ルーティングはsinatra風に書きたいです。getメソッドを定義して、パスに応じたレスポンスを登録できるようにします。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="vi">@routes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">get</span><span class="p">:{}</span> <span class="p">}</span>

<span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="n">path</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span>
  <span class="k">if</span> <span class="n">res</span> <span class="o">=</span> <span class="vi">@routes</span><span class="o">[</span><span class="ss">:get</span><span class="o">][</span><span class="n">path</span><span class="o">]</span>
    <span class="n">res</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="o">[</span> <span class="mi">404</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">not_found</span> <span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
  <span class="vi">@routes</span><span class="o">[</span><span class="ss">:get</span><span class="o">][</span><span class="n">path</span><span class="o">]</span> <span class="o">=</span> <span class="n">blk</span>
<span class="k">end</span>

<span class="n">get</span> <span class="s1">&#39;/draque&#39;</span> <span class="k">do</span>
  <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">draque_body</span> <span class="o">]</span>
<span class="k">end</span>

<span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
  <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">headers</span>
  <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="o">[</span><span class="s2">&quot;&lt;h1&gt;Welcome to the World of Draque!!&lt;/h1&gt;&quot;</span><span class="o">]</span> <span class="o">+</span>
  <span class="n">env</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;&lt;p&gt;%s =&gt; %s&lt;/p&gt;&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">draque_body</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;http://farm1.staticflickr.com/1/79151_ed9b9d37a9.jpg&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">not_found</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png?1329921026&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>わかりづらくなってきたので、フレームワークの部分をモジュール化します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="k">module</span> <span class="nn">Draque</span>
  <span class="vc">@@routes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">get</span><span class="p">:{}</span> <span class="p">}</span>

  <span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span>
    <span class="k">if</span> <span class="n">res</span> <span class="o">=</span> <span class="vc">@@routes</span><span class="o">[</span><span class="ss">:get</span><span class="o">][</span><span class="n">path</span><span class="o">]</span>
      <span class="n">res</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="o">[</span> <span class="mi">404</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">not_found</span> <span class="o">]</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="vc">@@routes</span><span class="o">[</span><span class="ss">:get</span><span class="o">][</span><span class="n">path</span><span class="o">]</span> <span class="o">=</span> <span class="n">blk</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">headers</span>
    <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="no">Draque</span><span class="p">)</span>

<span class="n">get</span> <span class="s1">&#39;/draque&#39;</span> <span class="k">do</span>
  <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">draque_body</span> <span class="o">]</span>
<span class="k">end</span>

<span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
  <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="o">[</span><span class="s2">&quot;&lt;h1&gt;Welcome to the World of Draque!!&lt;/h1&gt;&quot;</span><span class="o">]</span> <span class="o">+</span>
  <span class="n">env</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;&lt;p&gt;%s =&gt; %s&lt;/p&gt;&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">draque_body</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;http://farm1.staticflickr.com/1/79151_ed9b9d37a9.jpg&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">not_found</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png?1329921026&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>なんちゃってWebフレームワークdraqueの完成です！</p>

<p>Rack、最初の一歩は踏み出せたでしょうか。</p>
  </body>
</html>
