<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja">
  <head>
    <title></title>
    <link href='css/style.css' rel='stylesheet' type='text/css'/>
<link href='css/syntax.css' rel='stylesheet' type='text/css'/>
  </head>
  <body>
<h1>２章　Rack Middlewareの魔法</h1>

<p>噂によるとRackにはMiddlewareなる魔法があるそうです。そしてRack古文書にはMiddlewareについて次のようにあります。</p>

<blockquote><p><code>use</code>の呪文を唱えよ。さすれば扉は開かれん</p></blockquote>

<h2 id="pre">準備</h2>


<p>前回作った、なんちゃってWebフレームワーク「draque」を継続して使います。<code>config.ru</code>が少し長くなったので、Webアプリの本体を別ファイル<code>draque.rb</code>に移します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1">#draque.rb</span>
<span class="k">module</span> <span class="nn">Draque</span>
  <span class="vc">@@routes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">get</span><span class="p">:{}</span> <span class="p">}</span>

  <span class="k">def</span> <span class="nf">draque</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span>
    <span class="k">if</span> <span class="n">res</span> <span class="o">=</span> <span class="vc">@@routes</span><span class="o">[</span><span class="ss">:get</span><span class="o">][</span><span class="n">path</span><span class="o">]</span>
      <span class="n">res</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="o">[</span> <span class="mi">404</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">not_found</span> <span class="o">]</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
    <span class="vc">@@routes</span><span class="o">[</span><span class="ss">:get</span><span class="o">][</span><span class="n">path</span><span class="o">]</span> <span class="o">=</span> <span class="n">blk</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="no">Draque</span><span class="p">)</span>

<span class="n">get</span> <span class="s1">&#39;/draque&#39;</span> <span class="k">do</span>
  <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">draque_body</span> <span class="o">]</span>
<span class="k">end</span>

<span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
  <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">headers</span>
  <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">top_body</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="o">[</span><span class="s2">&quot;&lt;h1&gt;Welcome to the World of Draque!!&lt;/h1&gt;&quot;</span><span class="o">]</span> <span class="o">+</span>
  <span class="n">env</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="s2">&quot;&lt;p&gt;%s =&gt; %s&lt;/p&gt;&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">draque_body</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;http://farm1.staticflickr.com/1/79151_ed9b9d37a9.jpg&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">not_found</span>
  <span class="o">[</span><span class="s2">&quot;&lt;img src=&#39;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png?1329921026&#39;&gt;&quot;</span><span class="o">]</span>
<span class="k">end</span>
</code></pre></div>


<p><code>config.ru</code>は次のようになります。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>




<h2 id="use">useの呪文</h2>


<p>さて早速、<code>use</code>の呪文を試してみます。<code>config.ru</code>にuseを追加します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="n">use</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p><code>rackup</code>します。</p>

<div class="highlight"><pre><code class="bash">% rackup
~/.rbenv/.../rack/builder.rb:77:in <span class="sb">`</span>use<span class="s1">&#39;: wrong number of arguments (0 for 1) (ArgumentError)</span>
<span class="s1">        from config.ru:4:in `block in &lt;main&gt;&#39;</span>
</code></pre></div>


<p>引数が足りないと言われました。おそらくmiddlewareを渡すものと思われます。しかしmiddlewareが何なのかわからないので、例によってまずは<code>1</code>を渡してrackupしてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="n">use</span> <span class="mi">1</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">% rackup
~/.rbenv/.../rack/builder.rb:82:in <span class="sb">`</span>block in use<span class="s1">&#39;: undefined method `new&#39;</span> <span class="k">for </span>1:Fixnum <span class="o">(</span>NoMethodError<span class="o">)</span>
</code></pre></div>


<p>1にはnewメソッドが無いと言われました。これでクラスが期待されている、つまり<strong>middlewareはクラスである</strong>ということが分かりました（#newが定義されていれば、もしかしたらクラスでなくてもいいのかもしれません）。それでは、差し当たりUpDownというクラスを作って渡してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">% rackup
~/.rbenv/.../rack/builder.rb:82:in <span class="sb">`</span>initialize<span class="err">&#39;</span>: wrong number of arguments<span class="o">(</span>1 <span class="k">for </span>0<span class="o">)</span> <span class="o">(</span>ArgumentError<span class="o">)</span>
</code></pre></div>


<p>今度はinitializeの引数が足りないと言われました。では１引数のinitializeを定義します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">% rackup
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre></div>


<p>ポート9292でThin Webサーバが立ち上がりました。</p>

<p>Browserでhttp://localhost:9292 にアクセスしてみます。</p>

<div class="highlight"><pre><code class="bash">&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
NoMethodError: undefined method <span class="sb">`</span>call<span class="err">&#39;</span> <span class="k">for</span> <span class="c">#&lt;UpDown:0x00000101053fc8&gt;</span>
</code></pre></div>


<p>UpDownオブジェクトに<code>call</code>メソッドがないと言われました。では、UpDown#callを定義してみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span>
    
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>今度はどうでしょう。</p>

<div class="highlight"><pre><code class="bash">ArgumentError: wrong number of arguments <span class="o">(</span>1 <span class="k">for </span>0<span class="o">)</span>
        config.ru:10:in <span class="sb">`</span>call<span class="err">&#39;</span>
</code></pre></div>


<p>引数がないと言われました。ん？</p>

<p>では引数を付けてみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: Status must be &gt;<span class="o">=</span>100 seen as integer
</code></pre></div>


<p>Statusは100以上の数でなければならないとのRack::Lint::LintErrorが吐かれました。これって...</p>

<p>いつかきた道..ですよね？</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="mi">200</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>




<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: headers object should respond to <span class="c">#each, but doesn&#39;t (got NilClass as headers)</span>
</code></pre></div>




<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>




<div class="highlight"><pre><code class="bash">Rack::Lint::LintError: No Content-Type header found
</code></pre></div>




<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>




<div class="highlight"><pre><code class="bash">!! Unexpected error <span class="k">while </span>processing request: Response body must respond to each
127.0.0.1 - - <span class="o">[</span>05/Aug/2012 18:03:10<span class="o">]</span> <span class="s2">&quot;GET / HTTP/1.1&quot;</span> 200 - 0.0010
</code></pre></div>


<p>ほら！</p>

<p>第３返り値に#eachできるボディでしたね。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="s2">&quot;Hello, from UpDown&quot;</span><span class="o">.</span><span class="n">chars</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p><img src="images/draque6.png" alt="draque6" /></p>

<br clear='all' />


<p>いいですね！</p>

<p>  ・ ・ ・</p>

<p>って、良くないです。runした<code>draque</code>がレンダリングされないじゃないですか...</p>

<h2 id="draque">draqueを探す</h2>


<p>さて、どうしますか。</p>

<p>そう言えばinitializeに渡した引数、あれは何でしょうね。<code>p</code>してみましょうか。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="nb">p</span> <span class="n">arg</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="s2">&quot;Hello, from UpDown&quot;</span><span class="o">.</span><span class="n">chars</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">% rackup
<span class="c">#&lt;Method: Rack::Builder(Draque)#draque&gt;</span>
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
127.0.0.1 - - <span class="o">[</span>05/Aug/2012 18:14:13<span class="o">]</span> <span class="s2">&quot;GET / HTTP/1.1&quot;</span> 200 - 0.0012
127.0.0.1 - - <span class="o">[</span>05/Aug/2012 18:14:14<span class="o">]</span> <span class="s2">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 200 - 0.0009
</code></pre></div>


<p>なんとinitializeには<code>draque</code>が渡っていました。驚愕の事実。</p>

<p>そうすると、UpDown#callの中でdraqueをcallすれば、draqueがレンダリングされますか？やってみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<p><img src="images/draque7.png" alt="draque7" /></p>

<br clear='all' />


<p>うまくいきました。</p>

<h2 id="mid">middlewareを書く</h2>


<p>現状middleware <code>UpDown</code>は、何もしないダメウェアですが、callのところでゴニョゴニョすれば何かできると想像できます。やってみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="o">.</span><span class="n">reverse</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<p><img src="images/draque8.png" alt="draque8" /></p>

<br clear='all' />


<p>天地反転の呪文が適用されました。</p>

<h2 id="wrap">ここまでのまとめ</h2>


<p>以上のことをまとめます。</p>

<blockquote><ol>
<li>middlewareは#callメソッドを持ったクラスである。</li>
<li>middleware#initializeにはrunに渡したWebアプリオブジェクトが渡される。</li>
<li>middlewareの#callでWebアプリの#callを呼んで、ゴニョゴニョする。</li>
</ol>
</blockquote>

<p>従って、リクエストーレスポンスの流れは次のようになります。</p>

<blockquote><ol>
<li>Rack(Webサーバ)はBrowserからリクエストが来ると、useされたmiddleware(UpDwon)の#callを呼ぶ。</li>
<li>middlewareの#callはWebアプリ(draque)の#callを呼ぶ。</li>
<li>Webアプリは#call呼び出しに対してリクエストに応じた、[status, headers, body]を返す。</li>
<li>middlewareは#callでゴニョゴニョして、[status, headers, body]を返す。</li>
<li>Rack(Webサーバ)はBrowserにHTTPレスポンスを返す。</li>
</ol>
</blockquote>

<h2 id="mid2">２つ目のmiddlewareを書く</h2>


<p>さて、もう一つmiddlewareを書いてみます。名前をFireとします。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="o">.</span><span class="n">reverse</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Fire</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">new_body</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;&lt;div style=&#39;background-color:red&#39;&gt;&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="o">[</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="o">]</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">new_body</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">Fire</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>#callの中でゴニョゴニョしてるの分かりますか？</p>

<p>レスポンスを見てみます。</p>

<p><img src="images/draque9.png" alt="draque9" /></p>

<br clear='all' />


<p>天地反転の呪文と炎の呪文が適用されました。</p>

<p>さて、ここで気になることが一つあります。Fireに渡されたappはWebアプリなのでしょうか、それとも...。<code>p</code>で見てみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">app</span><span class="si">}</span><span class="s2"> in UpDown&quot;</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="o">.</span><span class="n">reverse</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Fire</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">app</span><span class="si">}</span><span class="s2"> in Fire&quot;</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">new_body</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;&lt;div style=&#39;background-color:red&#39;&gt;&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="o">[</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="o">]</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">new_body</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">Fire</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">% rackup
<span class="s2">&quot;#&lt;Method: Rack::Builder(Draque)#draque&gt; in UpDown&quot;</span>
<span class="s2">&quot;#&lt;UpDown:0x000001008ee738&gt; in Fire&quot;</span>
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre></div>


<p>UpDownにdraqueが渡されていることが分かります。そして、果たしてFireにはUpDownが渡されていました。</p>

<p>つまりこういうことです。</p>

<blockquote><ol>
<li>最初にuseされたmiddleware(Fire)のinitializeには、次にuseされたmiddleware(UpDown)のオブジェクトが渡される。つまりUpDownオブジェクトはFireオブジェクトでラップされる。</li>
<li>最後にuseされたmiddleware(UpDown)には、Webアプリオブジェクト(draque)が渡される。つまりdraqueオブジェクトはUpDownオブジェクトでラップされる。</li>
<li>つまりRackというのは、棚ではなくて、マトリョーシカである。</li>
</ol>
</blockquote>

<p>従って、リクエストーレスポンスの流れは次のようになります。</p>

<blockquote><ol>
<li>Rack(Webサーバ)はBrowserからリクエストが来ると、最初にuseされたFireの#callを呼ぶ。</li>
<li>Fireの#callは次にuseされたUpDownの#callを呼ぶ。</li>
<li>UpDownの#callはWebアプリ(draque)の#callを呼ぶ。</li>
<li>Webアプリは#call呼び出しに対してリクエストに応じた、[status, headers, body]を返す。</li>
<li>UpDownは#callでゴニョゴニョして、[status, headers, body]を返す。</li>
<li>Fireは#callでゴニョゴニョして、[status, headers, body]を返す。</li>
<li>Rack(Webサーバ)はBrowserにHTTPレスポンスを返す。</li>
</ol>
</blockquote>

<h2 id="fire">Fireを改良する</h2>


<p>さてFireの呪文は強力過ぎます。これを一部の文字列にだけ適用するよう改良します。</p>

<p>対象文字列を指定する方法が必要になります。ところがFireオブジェクトはRackが生成するので、そのチャンスは一見なさそうです。仕方がないので、試しにuseに渡して、initializeで受けるようにしてみます。<code>p</code>で出力を見ます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Fire</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">pattern</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
    <span class="nb">p</span> <span class="n">pattern</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">new_body</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;&lt;div style=&#39;background-color:red&#39;&gt;&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="o">[</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="o">]</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">new_body</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">Fire</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>どうでしょうか。</p>

<div class="highlight"><pre><code class="bash">% rackup
<span class="s2">&quot;hello&quot;</span>
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre></div>


<p>受け渡しができているようです。ついでにブロックもイケるか見てみます。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Fire</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">pattern</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
    <span class="nb">p</span> <span class="n">pattern</span>
    <span class="k">yield</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">new_body</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;&lt;div style=&#39;background-color:red&#39;&gt;&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="o">[</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="o">]</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">new_body</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">Fire</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span> <span class="k">do</span>
  <span class="nb">p</span> <span class="s2">&quot;hello from a block!&quot;</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>




<div class="highlight"><pre><code class="bash">% rackup
<span class="s2">&quot;hello&quot;</span>
<span class="s2">&quot;hello from a block!&quot;</span>
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:9292, CTRL+C to stop
</code></pre></div>


<p>ブロックも受けてくれるようです。</p>

<p>では、新しいFireを実装します。</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s2">&quot;./draque&quot;</span>

<span class="k">class</span> <span class="nc">UpDown</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="o">.</span><span class="n">reverse</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Fire</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">pattern</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
    <span class="vi">@pattern</span> <span class="o">=</span> <span class="n">pattern</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>

    <span class="n">replace</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="n">pat</span><span class="p">{</span> <span class="s2">&quot;&lt;em style=&#39;background-color:red&#39;&gt;</span><span class="si">#{</span><span class="n">pat</span><span class="si">}</span><span class="s2">&lt;/em&gt;&quot;</span> <span class="p">}</span>
    <span class="n">new_body</span> <span class="o">=</span> <span class="n">body</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="p">,</span> <span class="n">part</span><span class="o">|</span> <span class="n">m</span> <span class="o">&lt;&lt;</span> <span class="n">part</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="vi">@pattern</span><span class="p">)</span> <span class="p">{</span> <span class="n">replace</span><span class="o">[</span><span class="vg">$&amp;</span><span class="o">]</span> <span class="p">}</span> <span class="p">}</span>
    
    <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">new_body</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">use</span> <span class="no">Fire</span><span class="p">,</span> <span class="sr">/rack|draque/i</span>

<span class="n">use</span> <span class="no">UpDown</span>

<span class="n">run</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:draque</span><span class="p">)</span>
</code></pre></div>


<p>出力を見てみます。</p>

<p><img src="images/draque10.png" alt="draque10" /></p>

<br clear='all' />


<p>いいですね！</p>

<p>Rack、次の一歩は踏み出せたでしょうか。</p>

<p>今回の結論：</p>

<blockquote><p>Rackは実はマトリョーシカだった！</p></blockquote>
  </body>
</html>
